(()=>{"use strict";const e=JSON.parse('{"tooltip-play":"Afspelen","tooltip-pause":"Pauzeren","tooltip-go-back-10-seconds":"Ga 10 seconden terug","tooltip-forward-10-seconds":"Ga 10 seconden vooruit","tooltip-mute":"Zet geluid uit","tooltip-unmute":"Zet geluid aan","tooltip-restart-video":"Vanaf het begin kijken","tooltip-enable-subtitles":"Ondertitels aanzetten","tooltip-disable-subtitles":"Ondertitels uitzetten","tooltip-fullscreen":"Video in volledig scherm afspelen","tooltip-fullscreen-exit":"Volledige schermweergave verlaten","tooltip-seek-bar":"Navigeren binnen de video","tooltip-adjust-volume":"Volume aanpassen","tooltip-casting":"Aan het casten","tooltip-not-casting":"Niet aan het casten","tooltip-airplaying":"Aan het airplayen","tooltip-not-airplaying":"Niet aan het airplayen","tooltip-being-casted":"Wordt afgespeeld op","tooltip-quality":"Kwaliteit","errors-invalid-token":"Sessie is verlopen, gelieve de pagina te vernieuwen","errors-video-not-found":"Deze video kan niet gevonden worden","errors-invalid-interval":"Deze video is niet langer beschikbaar","errors-invalid-location":"Deze video kan niet bekeken worden waar je je bevindt","errors-authentication-required":"Inloggen is vereist om deze video te kunnen bekijken","errors-incomplete-roaming-config":"Profiel onvolledig, EU roaming is hierdoor niet toegestaan","errors-no-roaming":"Het is niet mogelijk deze video te bekijken buiten België","errors-proxy-detected":"Deze video kan niet worden afgespeeld omdat je surft via een proxyserver","errors-user-not-authenticated-and-roaming-is-required":"Inloggen met een account dat EU roaming toelaat is vereist","errors-youtube-invalid-param":"De aanvraag bevat een incorrect parameter waarde!","errors-youtube-html5-error":"De gevraagde video kan niet afgespeeld worden in de HTML5 speler!","errors-youtube-video-not-found":"Deze video kan niet gevonden worden!","errors-youtube-embed-not-allowed":"Deze video kan niet afgespeeld worden in een geëmbedde speler","errors-an-internal-error-occurred":"Er trad een interne fout op in de speler, contacteer support","errors-a-network-error-occurred":"Er trad een probleem op met de netwerkverbinding!","errors-the-program-schedule-cannot-be-retrieved":"De programmaplanning kan niet worden opgehaald!","errors-a-token-could-not-be-retrieved":"Er kan geen token opgehaald worden!","errors-cannot-load-youtube-video":"De YouTube video kan niet geladen worden!","errors-cannot-perform-startover":"De startover kan niet uitgevoerd worden!","errors-cannot-select-a-next-source":"Kan geen volgende bron selecteren","errors-the-player-cannot-be-started":"De speler kan niet gestart worden: ","errors-media-cannot-be-played":"De media kan niet afgespeeld worden!","errors-content-is-age-restricted":"De media kan enkel bekeken worden door personen met de correcte leeftijd!","errors-unknown":"Onbekende fout","warning-incorrect-ad-config":"Incorrecte configuratie voor advertenties!","warning-media-melon-could-not-be-loaded":"Media Melon Analytics kon niet geladen worden!","warning-the-current-token-is-corrupt":"Het huidige token is corrupt!","warning-adobe-analytics-could-not-be-loaded":"Adobe Analytics kon niet geladen worden!","warning-cim-analytics-could-not-be-loaded":"CIM Analytics kon niet geladen worden!","warning-an-error-occurred-with-the-video-security":"Er trad een probleem op met de beveiliging van de video","warning-the-ad-cannot-be-played":"De advertentie kan niet afgespeeld worden!","warning-an-error-occurred-during-casting":"Er trad een probleem op bij het casten!","vrt-video-info":"VRT Mediaplayer, programma:","next-video":"Volgende video","skip":"Doorspoelen","start-video":"Video starten","sponsoring":"Sponsoring:","seconds":"sec.","gibibits-per-hour":"GiB/u"}'),t=JSON.parse('{"tooltip-play":"Jouer","tooltip-pause":"Pause","tooltip-go-back-10-seconds":"Reculer de 10 secondes","tooltip-forward-10-seconds":"Avancez de 10 secondes","tooltip-mute":"Désactiver le son","tooltip-unmute":"Activer le son","tooltip-restart-video":"Regardez depuis le début","tooltip-enable-subtitles":"Activer les sous-titres","tooltip-disable-subtitles":"Désactiver les sous-titres","tooltip-fullscreen":"Lire la vidéo en plein écran","tooltip-fullscreen-exit":"Quitter la vue plein écran","tooltip-seek-bar":"Naviguer dans la vidéo","tooltip-adjust-volume":"Ajustez le volume","tooltip-casting":"Casting","tooltip-not-casting":"Casting inactif","tooltip-airplaying":"Airplaying","tooltip-not-airplaying":"Airplay inactif","tooltip-being-casted":"Joué sur","tooltip-quality":"Qualité","errors-invalid-token":"La session a expiré, veuillez actualiser la page","errors-video-not-found":"Cette vidéo est introuvable","errors-invalid-interval":"Cette vidéo n\'est plus disponible","errors-invalid-location":"Cette vidéo ne peut pas être visionnée où que vous soyez","errors-authentication-required":"Une connexion est requise pour voir cette vidéo","errors-incomplete-roaming-config":"Profil incomplet, l\'itinérance dans l\'UE n\'est donc pas autorisée","errors-no-roaming":"Il n\'est pas possible de regarder cette vidéo en dehors de la Belgique","errors-proxy-detected":"Impossible de lire cette vidéo car vous surfez via un serveur proxy","errors-user-not-authenticated-and-roaming-is-required":"Une connexion avec un compte autorisant l\'itinérance dans l\'UE est requise","errors-youtube-invalid-param":"La demande contient une valeur de paramètre incorrecte!","errors-youtube-html5-error":"La vidéo demandée ne peut pas être lue dans le lecteur HTML5!","errors-youtube-video-not-found":"Cette vidéo est introuvable!","errors-youtube-embed-not-allowed":"Cette vidéo ne peut pas être lue dans un lecteur intégré","errors-an-internal-error-occurred":"Il y a eu une erreur interne dans le lecteur, contactez le support","errors-a-network-error-occurred":"Il y a eu un problème avec la connexion réseau!","errors-the-program-schedule-cannot-be-retrieved":"Le programme ne peut pas être récupéré!","errors-a-token-could-not-be-retrieved":"Aucun jeton ne peut être récupéré!","errors-cannot-load-youtube-video":"La vidéo YouTube ne peut pas être chargée!","errors-cannot-perform-startover":"Le redémarrage ne peut pas être exécuté!","errors-cannot-select-a-next-source":"Impossible de sélectionner la source suivante","errors-the-player-cannot-be-started":"Le joueur ne peut pas être démarré: ","errors-media-cannot-be-played":"Le média ne peut pas être lu!","errors-content-is-age-restricted":"Les médias ne peuvent être visionnés que par des personnes d\'âge approprié!","errors-unknown":"Erreur inconnue","warning-incorrect-ad-config":"Configuration incorrecte pour les annonces!","warning-media-melon-could-not-be-loaded":"Impossible de charger Media Melon Analytics!","warning-the-current-token-is-corrupt":"Le jeton actuel est corrompu!","warning-adobe-analytics-could-not-be-loaded":"Impossible de charger Adobe Analytics!","warning-cim-analytics-could-not-be-loaded":"CIM Analytics n\'a pas pu être chargé!","warning-an-error-occurred-with-the-video-security":"Il y a eu un problème avec la sécurité de la vidéo","warning-the-ad-cannot-be-played":"L\'annonce ne peut pas être lue!","warning-an-error-occurred-during-casting":"Il y a eu un problème de casting!","vrt-video-info":"VRT Media Player, programme:","next-video":"Vidéo suivante","skip":"Affleurer","start-video":"Lancer la vidéo","sponsoring":"Parrainage:","seconds":"sec.","gibibits-per-hour":"GiB/h"}'),n=JSON.parse('{"tooltip-play":"Abspielen","tooltip-pause":"Pause","tooltip-go-back-10-seconds":"Gehe 10 Sekunden zurück","tooltip-forward-10-seconds":"Gehe 10 Sekunden vorwärts","tooltip-mute":"Ton ausschalten","tooltip-unmute":"Ton einschalten","tooltip-restart-video":"Beobachten Sie von Anfang an","tooltip-enable-subtitles":"Untertitel aktivieren","tooltip-disable-subtitles":"Untertitel deaktivieren","tooltip-fullscreen":"Video im Vollbildmodus abspielen","tooltip-fullscreen-exit":"Beenden Sie die Vollbildansicht","tooltip-seek-bar":"Navigieren Sie im Video","tooltip-adjust-volume":"Stellen Sie die Lautstärke ein","tooltip-casting":"Casting","tooltip-not-casting":"Nicht casting","tooltip-airplaying":"Airplaying","tooltip-not-airplaying":"Nicht Airplaying","tooltip-being-casted":"Gespielt am","tooltip-quality":"Qualität","errors-invalid-token":"Die Sitzung ist abgelaufen. Bitte aktualisieren Sie die Seite","errors-video-not-found":"Dieses Video wurde nicht gefunden","errors-invalid-interval":"Dieses Video ist nicht mehr verfügbar","errors-invalid-location":"Dieses Video kann nicht angesehen werden, wo Sie sind","errors-authentication-required":"Zum Anzeigen dieses Videos ist ein Login erforderlich","errors-incomplete-roaming-config":"Profil unvollständig, EU-Roaming ist daher nicht erlaubt","errors-no-roaming":"Es ist nicht möglich, dieses Video außerhalb Belgiens anzusehen","errors-proxy-detected":"Dieses Video kann nicht abgespielt werden, da Sie über einen Proxyserver surfen","errors-user-not-authenticated-and-roaming-is-required":"Die Anmeldung mit einem Konto, das EU-Roaming ermöglicht, ist erforderlich","errors-youtube-invalid-param":"Die Anfrage enthält einen falschen Parameterwert!","errors-youtube-html5-error":"Das angeforderte Video kann nicht im HTML5-Player abgespielt werden!","errors-youtube-video-not-found":"Dieses Video kann nicht gefunden werden!","errors-youtube-embed-not-allowed":"Dieses Video kann nicht in einem eingebetteten Player abgespielt werden","errors-an-internal-error-occurred":"Es gab einen internen Fehler im Player. Wenden Sie sich an den Support","errors-a-network-error-occurred":"Es gab ein Problem mit der Netzwerkverbindung!","errors-the-program-schedule-cannot-be-retrieved":"Der Programmplan kann nicht abgerufen werden!","errors-a-token-could-not-be-retrieved":"Es kann kein Token abgerufen werden!","errors-cannot-load-youtube-video":"Das YouTube-Video kann nicht geladen werden!","errors-cannot-perform-startover":"Der Start kann nicht ausgeführt werden!","errors-cannot-select-a-next-source":"Nächste Quelle kann nicht ausgewählt werden","errors-the-player-cannot-be-started":"Der Player kann nicht gestartet werden: ","errors-media-cannot-be-played":"Die Medien können nicht abgespielt werden!","errors-content-is-age-restricted":"Die Medien können nur von Personen angemessenen Alters angesehen werden!","errors-unknown":"Unbekannter Fehler","warning-incorrect-ad-config":"Falsche Konfiguration für Anzeigen!","warning-media-melon-could-not-be-loaded":"Media Melon Analytics konnte nicht geladen werden!","warning-the-current-token-is-corrupt":"Das aktuelle Token ist beschädigt!","warning-adobe-analytics-could-not-be-loaded":"Adobe Analytics konnte nicht geladen werden!","warning-cim-analytics-could-not-be-loaded":"CIM Analytics konnte nicht geladen werden!","warning-an-error-occurred-with-the-video-security":"Es gab ein Problem mit der Sicherheit des Videos","warning-the-ad-cannot-be-played":"Die Anzeige kann nicht abgespielt werden!","warning-an-error-occurred-during-casting":"Es gab ein Problem beim Casting!","vrt-video-info":"VRT Media Player, Programm:","next-video":"Nächstes Video","skip":"Spülen","start-video":"Video starten","sponsoring":"Sponsoring:","seconds":"sec.","gibibits-per-hour":"GiB/u"}'),r=JSON.parse('{"tooltip-play":"Play","tooltip-pause":"Pause","tooltip-go-back-10-seconds":"Go back 10 seconds","tooltip-forward-10-seconds":"Fast forward 10 seconds","tooltip-mute":"Mute sound","tooltip-unmute":"Unmute sound","tooltip-restart-video":"Watch from the beginning","tooltip-enable-subtitles":"Enable subtitles","tooltip-disable-subtitles":"Disable subtitles","tooltip-fullscreen":"Play video in fullscreen mode","tooltip-fullscreen-exit":"Exit fullscreen mode","tooltip-seek-bar":"Navigate inside the video","tooltip-adjust-volume":"Adjust volume","tooltip-casting":"Casting","tooltip-not-casting":"Not casting","tooltip-airplaying":"Airplaying","tooltip-not-airplaying":"Not Airplaying","tooltip-being-casted":"Is being played back on","tooltip-quality":"Quality","errors-invalid-token":"Session expired, please refresh the page","errors-video-not-found":"Video cannot be found","errors-invalid-interval":"Video no longer available","errors-invalid-location":"This video cannot be viewed from your location","errors-authentication-required":"Login is required to watch this video","errors-incomplete-roaming-config":"Incomplete progile, EU roaming is disabled because of this","errors-no-roaming":"This video cannot be viewed outside of Belgium","errors-proxy-detected":"This video cannot be viewed because you are using a proxy server","errors-user-not-authenticated-and-roaming-is-required":"Login with an EU roaming enabled account is required","errors-youtube-invalid-param":"The request contains an invalid parameter value!","errors-youtube-html5-error":"The requested video cannot be played in the HTML5 player!","errors-youtube-video-not-found":"This video cannot be found!","errors-youtube-embed-not-allowed":"This video cannot be played back in the embedded player!","errors-an-internal-error-occurred":"An internal error occurred in the player, please contact support!","errors-a-network-error-occurred":"An error occurred with the network connection!","errors-the-program-schedule-cannot-be-retrieved":"The program schedule could not be retrieved!","errors-a-token-could-not-be-retrieved":"A token could not be retrieved!","errors-cannot-load-youtube-video":"The YouTube video could not be loaded!","errors-cannot-perform-startover":"The startover could not be performed!","errors-cannot-select-a-next-source":"Could not select a next source for playback!","errors-the-player-cannot-be-started":"The player could not be started: ","errors-media-cannot-be-played":"The media cannot be played back!","errors-content-is-age-restricted":"The media can only be viewed by persons of appropriate age!","errors-unknown":"Onbekende fout","warning-incorrect-ad-config":"Incorrect configuration for adverts!","warning-media-melon-could-not-be-loaded":"Media Melon Analytics could not be loaded!","warning-the-current-token-is-corrupt":"The current token is corrupt!","warning-adobe-analytics-could-not-be-loaded":"Adobe Analytics could not be loaded!","warning-cim-analytics-could-not-be-loaded":"CIM Analytics could not be loaded!","warning-an-error-occurred-with-the-video-security":"An issue occurred with the video security!","warning-the-ad-cannot-be-played":"The advert could not be played!","warning-an-error-occurred-during-casting":"An error occurred during casting!","vrt-video-info":"VRT Mediaplayer, program:","next-video":"Next video","skip":"Skip","start-video":"Start video","sponsoring":"Sponsoring:","seconds":"sec.","gibibits-per-hour":"GiB/h"}'),i=JSON.parse('{"tooltip-play":"Afspelen","tooltip-pause":"Pauzeren","tooltip-go-back-10-seconds":"Ga 10 seconden terug","tooltip-forward-10-seconds":"Ga 10 seconden vooruit","tooltip-mute":"Zet geluid uit","tooltip-unmute":"Zet geluid aan","tooltip-restart-video":"Vanaf het begin kijken","tooltip-enable-subtitles":"Ondertitels aanzetten","tooltip-disable-subtitles":"Ondertitels aanzetten","tooltip-fullscreen":"Video in volledig scherm afspelen","tooltip-fullscreen-exit":"Volledige schermweergave verlaten","tooltip-seek-bar":"Navigeren binnen de video","tooltip-adjust-volume":"Volume aanpassen","tooltip-casting":"Aan het casten","tooltip-not-casting":"Niet aan het casten","tooltip-airplaying":"Aan het airplayen","tooltip-not-airplaying":"Niet aan het airplayen","tooltip-being-casted":"Wordt afgespeeld op","tooltip-quality":"Kwaliteit","errors-invalid-token":"Sessie is verlopen, gelieve de pagina te vernieuwen","errors-video-not-found":"Deze video kan niet gevonden worden","errors-invalid-interval":"Deze video is niet langer beschikbaar","errors-invalid-location":"Deze video kan niet bekeken worden waar je je bevindt","errors-authentication-required":"Inloggen is vereist om deze video te kunnen bekijken","errors-incomplete-roaming-config":"Profiel onvolledig, EU roaming is hierdoor niet toegestaan","errors-no-roaming":"Het is niet mogelijk deze video te bekijken buiten België","errors-proxy-detected":"Deze video kan niet worden afgespeeld omdat je surft via een proxyserver","errors-user-not-authenticated-and-roaming-is-required":"Inloggen met een account dat EU roaming toelaat is vereist","errors-youtube-invalid-param":"De aanvraag bevat een incorrect parameter waarde!","errors-youtube-html5-error":"De gevraagde video kan niet afgespeeld worden in de HTML5 speler!","errors-youtube-video-not-found":"Deze video kan niet gevonden worden!","errors-youtube-embed-not-allowed":"Deze video kan niet afgespeeld worden in een geëmbedde speler","errors-an-internal-error-occurred":"Er trad een interne fout op in de speler, contacteer support","errors-a-network-error-occurred":"Er trad een probleem op met de netwerkverbinding!","errors-the-program-schedule-cannot-be-retrieved":"De programmaplanning kan niet worden opgehaald!","errors-a-token-could-not-be-retrieved":"Er kan geen token opgehaald worden!","errors-cannot-load-youtube-video":"De YouTube video kan niet geladen worden!","errors-cannot-perform-startover":"De startover kan niet uitgevoerd worden!","errors-cannot-select-a-next-source":"Kan geen volgende bron selecteren","errors-the-player-cannot-be-started":"De speler kan niet gestart worden: ","errors-media-cannot-be-played":"De media kan niet afgespeeld worden!","errors-content-is-age-restricted":"De media kan enkel bekeken worden door personen met de correcte leeftijd!","errors-unknown":"Onbekende fout","warning-incorrect-ad-config":"Incorrecte configuratie voor advertenties!","warning-media-melon-could-not-be-loaded":"Media Melon Analytics kon niet geladen worden!","warning-the-current-token-is-corrupt":"Het huidige token is corrupt!","warning-adobe-analytics-could-not-be-loaded":"Adobe Analytics kon niet geladen worden!","warning-cim-analytics-could-not-be-loaded":"CIM Analytics kon niet geladen worden!","warning-an-error-occurred-with-the-video-security":"Er trad een probleem op met de beveiliging van de video","warning-the-ad-cannot-be-played":"De advertentie kan niet afgespeeld worden!","warning-an-error-occurred-during-casting":"Er trad een probleem op bij het casten!","vrt-video-info":"VRT Mediaplayer, programma:","next-video":"Volgende video","skip":"Doorspoelen","start-video":"Video starten","sponsoring":"Sponsoring:","seconds":"sec.","gibibits-per-hour":"GiB/u"}');var a,o,l,s,u,c=function(){function o(){}return o.isLanguageSupported=function(e){var t=Object.values(a),n=!!(e&&t.indexOf(e.toLowerCase())>-1);return n||console.warn("Player language: "+e+" is not supported, falling back to default: nl"),n},o.convertToSupportedTheoLanguage=function(e){switch(e){case a.DUTCH:case a.DUTCH_KETNET:return"nl";case a.FRENCH:return"fr";case a.GERMAN:return"de";case a.ENGLISH:return"en";default:return"nl"}},o.getValue=function(e,t,n){void 0===n&&(n=!1);var r="UNKNOWN-VALUE-FOR => "+e+" ("+t+")";try{var i=this.translations[t][e];r=i||(n?null:r)}catch(e){}return r},o.translateAllElements=function(e,t){e.querySelectorAll("[aria-translation-key]").forEach((function(e){var n=o.getValue(e.getAttribute("aria-translation-key"),t);e.getAttribute("aria-translation-key"),e.hasAttribute("aria-label")?e.setAttribute("aria-label",n):e.textContent=n}))},o.translations={nl:e,fr:t,de:n,en:r,nl_ketnet:i},o}();!function(e){e.DUTCH="nl",e.FRENCH="fr",e.GERMAN="de",e.ENGLISH="en",e.DUTCH_KETNET="nl_ketnet"}(a||(a={})),function(e){e.ON="on",e.OFF_STOP_AT_BEGIN="off_stop_at_begin",e.OFF_STOP_AT_END="off_stop_at_end"}(o||(o={})),function(e){e.NONE="none",e.METADATA="metadata",e.AUTO="auto"}(l||(l={})),function(e){e.PERFORMANCE="performance",e.QUALITY="quality",e.BANDWIDTH="bandwidth"}(s||(s={})),function(e){e.VIDEO="video",e.AUDIO="audio"}(u||(u={}));var p,d,h=function(){function e(e,t,n,r,i,a,o,l,s,u,c,p,d,h,y,f){this.productionMode=e,this.containerElement=t,this.libraryLocation=n,this.aggregatorUrl=r,this.showNoErrors=o,this.preloadMode=l,this.playerMode=s,this.aspectRatio=u,this.nextUpDelay=h,this.nextUpAutoPlay=y,this.adConfig=c,this.uiConfig=p,this.clientCode=i,this.cimId=d,this.identityToken=a,this.authoringMode=f,this.isLiveStartOver=!1}return e.getTheoConfig=function(e){return{allowNativeFullscreen:!0,libraryLocation:e.libraryLocation,mutedAutoplay:"all",persistVolume:!1,isEmbeddable:!0,ui:{fluid:!0,aspectRatio:e.aspectRatio,language:c.convertToSupportedTheoLanguage(e.uiConfig.uiLanguage)},cast:{strategy:"manual",chromecast:{appID:"5F432906"}},ads:{showCountdown:!1}}},e.DEFAULTS={skin:"default",color:"green",aspectRatio:"16:9",identityToken:"",cimId:".cA63ye4ZyIIPzz71Hl5Bqe1rmDIl1s5ggCFAoZ9PvL.I7",nextUpDelay:15,nextUpAutoPlay:"on",uiLanguage:a.DUTCH,authoringMode:!1,preloadMode:l.METADATA,abrStrategy:s.BANDWIDTH,startMutedOverride:!1,autoplay:!1,playerMode:u.VIDEO,isLiveStartOver:!1,startOverBegin:null,startOverEnd:null},e}(),y=function(e){this.bandwidth=e},f=(p=function(e,t){return(p=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}p(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),v=function(e){function t(t,n,r,i){var a=e.call(this,n)||this;return a.framerate=t,a.width=r,a.height=i,a}return f(t,e),t}(y),b=function(){function e(e,t){this.publisher=e,this.language=t}return e.prototype.handleErrorFromAggregator=function(e,t){var n=null;try{n=JSON.parse(t)}catch(e){n={code:"UNPARSABLE_RESPONSE",message:"The response cannot be parsed!"}}var r=T.publicPlayerEvents.error;switch(r.message="Fout: ",r.content=n||t,n.code){case"INVALID_TOKEN":r.code=d.AGGREGATOR_ERROR_INVALID_TOKEN,r.message+=c.getValue("errors-invalid-token",this.language);break;case"VIDEO_NOT_FOUND":r.code=d.AGGREGATOR_ERROR_VIDEO_NOT_FOUND,r.message+=c.getValue("errors-video-not-found",this.language);break;case"INVALID_INTERVAL":r.code=d.AGGREGATOR_ERROR_INVALID_INTERVAL,r.message+=c.getValue("errors-invalid-interval",this.language);break;case"INVALID_LOCATION":r.code=d.AGGREGATOR_ERROR_GEOBLOCKED,r.message+=c.getValue("errors-invalid-location",this.language);break;case"AUTHENTICATION_REQUIRED":r.code=d.AGGREGATOR_ERROR_NOT_AUTHENTICATED,r.message+=c.getValue("errors-authentication-required",this.language);break;case"INCOMPLETE_ROAMING_CONFIG":r.code=d.AGGREGATOR_ERROR_INCOMPLETE_PROFILE,r.message+=c.getValue("errors-incomplete-roaming-config",this.language);break;case"NO_ROAMING":r.code=d.AGGREGATOR_ERROR_NO_ROAMING,r.message+=c.getValue("errors-no-roaming",this.language);break;case"PROXY_DETECTED":r.code=d.AGGREGATOR_PROXY_ERROR,r.message+=c.getValue("errors-proxy-detected",this.language);break;case"USER_NOT_AUTHENTICATED_AND_ROAMING_IS_REQUIRED":r.code=d.AGGREGATOR_ERROR_NOT_AUTHENTICATED_AND_ROAMING_REQUIRED,r.message+=c.getValue("errors-user-not-authenticated-and-roaming-is-required",this.language);break;case"ERROR_AGE_RESTRICTED":r.code=d.AGGREGATOR_ERROR_AGE_RESTRICTED,r.message+=c.getValue("errors-content-is-age-restricted",this.language);break;default:r.code=d.AGGREGATOR_ERROR_GENERAL,r.message+=c.getValue("errors-unknown",this.language)}if(this.publisher.publish(r),r.code===d.AGGREGATOR_ERROR_GEOBLOCKED||r.code===d.AGGREGATOR_ERROR_NOT_AUTHENTICATED||r.code===d.AGGREGATOR_ERROR_NO_ROAMING||r.code===d.AGGREGATOR_ERROR_INCOMPLETE_PROFILE||r.code===d.AGGREGATOR_ERROR_NOT_AUTHENTICATED_AND_ROAMING_REQUIRED||r.code===d.AGGREGATOR_ERROR_AGE_RESTRICTED){var i=T.publicPlayerEvents.playnotallowed;i.code=r.code,i.message=r.message,i.content=r.content,this.publisher.publish(i)}},e.prototype.handleErrorFromV2Aggregator=function(e,t){var n=null;try{n=JSON.parse(t)}catch(e){n={code:"UNPARSABLE_RESPONSE",message:"The response cannot be parsed!"}}var r=T.publicPlayerEvents.error;if(r.message="Fout: ",r.content=n||t,403===e.status)r.code=d.AGGREGATOR_ERROR_INVALID_TOKEN,r.message+=c.getValue("errors-invalid-token",this.language),r.content={code:"INVALID_TOKEN"};else if(404===e.status)r.code=d.AGGREGATOR_ERROR_VIDEO_NOT_FOUND,r.message+=c.getValue("errors-video-not-found",this.language),r.content={code:"VIDEO_NOT_FOUND"};else switch(n.code){case"CONTENT_AVAILABLE_ONLY_FOR_BE_RESIDENTS_AND_EXPATS":case"CONTENT_AVAILABLE_ONLY_FOR_BE_RESIDENTS":case"CONTENT_AVAILABLE_ONLY_IN_BE":case"CONTENT_UNAVAILABLE_VIA_PROXY":case"CONTENT_CURRENTLY_UNAVAILABLE":case"CONTENT_IS_AGE_RESTRICTED":case"CONTENT_REQUIRES_AUTHENTICATION":r.code=-1,r.message=n.code;break;default:r.code=-1,r.message=n.code}if(this.publisher.publish(r),-1===r.code){var i=T.publicPlayerEvents.playnotallowed;i.code=r.code,i.message=r.message,i.content=r.content,this.publisher.publish(i)}},e.prototype.handleYouTubeError=function(e){if(e){var t,n=T.publicPlayerEvents.error,r="";switch(e){case 2:t=d.PLAYER_YOUTUBE_ERROR_INVALID_PARAM,c.getValue("errors-youtube-invalid-param",this.language),r="The request contains an invalid parameter value";break;case 5:t=d.PLAYER_YOUTUBE_ERROR_HTML5,c.getValue("errors-youtube-html5-error",this.language),r="The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred";break;case 100:t=d.PLAYER_YOUTUBE_ERROR_VIDEO_NOT_FOUND,c.getValue("errors-youtube-video-not-found",this.language),r="The video requested was not found.";break;case 101:case 150:t=d.PLAYER_YOUTUBE_ERROR_EMBED,c.getValue("errors-youtube-embed-not-allowed",this.language),r="The owner of the requested video does not allow it to be played in embedded players.";break;default:t=d.PLAYER_YOUTUBE_ERROR_GENERAL,c.getValue("errors-unknown",this.language),r="An unknown YouTube error occurred"}n.code=t,n.message=r,n.content={code:e,message:r},this.publisher.publish(n)}},e.prototype.handleError=function(e,t,n){var r=T.publicPlayerEvents.error;r.code=e;var i=c.getValue(t,this.language,!0);r.message=i||t,r.content=n||{},this.publisher.publish(r)},e.prototype.handleWarning=function(e,t,n){var r=T.publicPlayerEvents.warning;r.code=e;var i=c.getValue(t,this.language,!0);r.message=i||t,r.content=n||{},this.publisher.publish(r)},e.errorToSentry=function(e,t){if(e||t){e=e||"Default-fingerprint";var n=window;n.Sentry&&n.Sentry.withScope((function(r){var i,a="Unknown";if(t){var o=t.code?t.code+"":"Unknown",l=t.name?t.name:null,s=t.message?t.message:l;s=s||JSON.stringify(t,null,4),(i=new Error(o+": "+s)).data=t.content?t.content:{},a=o}else i=new Error(e);r.setFingerprint([e,"1.9.9-prod-2021-10-21T12:48:33",a]),n.Sentry.captureException(i)}))}},e.createError=function(e,t){var n;return(n=e?new Error(e):new Error).data=t,n},e}();!function(e){e[e.AGGREGATOR_V2_UNMAPPED=-1]="AGGREGATOR_V2_UNMAPPED",e[e.AGGREGATOR_ERROR_GENERAL=100]="AGGREGATOR_ERROR_GENERAL",e[e.AGGREGATOR_ERROR_INVALID_TOKEN=101]="AGGREGATOR_ERROR_INVALID_TOKEN",e[e.AGGREGATOR_ERROR_VIDEO_NOT_FOUND=102]="AGGREGATOR_ERROR_VIDEO_NOT_FOUND",e[e.AGGREGATOR_ERROR_INVALID_INTERVAL=103]="AGGREGATOR_ERROR_INVALID_INTERVAL",e[e.AGGREGATOR_ERROR_GEOBLOCKED=104]="AGGREGATOR_ERROR_GEOBLOCKED",e[e.AGGREGATOR_ERROR_NOT_AUTHENTICATED=105]="AGGREGATOR_ERROR_NOT_AUTHENTICATED",e[e.AGGREGATOR_ERROR_NO_ROAMING=106]="AGGREGATOR_ERROR_NO_ROAMING",e[e.AGGREGATOR_ERROR_INCOMPLETE_PROFILE=107]="AGGREGATOR_ERROR_INCOMPLETE_PROFILE",e[e.AGGREGATOR_ERROR_NOT_AUTHENTICATED_AND_ROAMING_REQUIRED=108]="AGGREGATOR_ERROR_NOT_AUTHENTICATED_AND_ROAMING_REQUIRED",e[e.AGGREGATOR_ERROR_AGE_RESTRICTED=109]="AGGREGATOR_ERROR_AGE_RESTRICTED",e[e.AGGREGATOR_TOKEN_ERROR_CANNOT_GET_TOKEN=120]="AGGREGATOR_TOKEN_ERROR_CANNOT_GET_TOKEN",e[e.AGGREGATOR_TOKEN_ERROR_STORED_TOKEN_MALFORMED=121]="AGGREGATOR_TOKEN_ERROR_STORED_TOKEN_MALFORMED",e[e.AGGREGATOR_SCHEDULE_ERROR_CANNOT_GET_SCHEDULE=130]="AGGREGATOR_SCHEDULE_ERROR_CANNOT_GET_SCHEDULE",e[e.AGGREGATOR_PROXY_ERROR=140]="AGGREGATOR_PROXY_ERROR",e[e.PLAYER_API_ERROR_GENERAL=200]="PLAYER_API_ERROR_GENERAL",e[e.PLAYER_API_ERROR_DRM=201]="PLAYER_API_ERROR_DRM",e[e.PLAYER_API_ERROR_DASH_SEGMENT_NOT_FOUND=202]="PLAYER_API_ERROR_DASH_SEGMENT_NOT_FOUND",e[e.PLAYER_API_ERROR_MODE=203]="PLAYER_API_ERROR_MODE",e[e.PLAYER_API_ERROR_PLAYLIST=204]="PLAYER_API_ERROR_PLAYLIST",e[e.PLAYER_API_ERROR_PLAYBACK_NOT_SUPPORTED=205]="PLAYER_API_ERROR_PLAYBACK_NOT_SUPPORTED",e[e.PLAYER_API_ERROR_EVENT_HANDLER=206]="PLAYER_API_ERROR_EVENT_HANDLER",e[e.PLAYER_ADS_API_GENERAL=210]="PLAYER_ADS_API_GENERAL",e[e.PLAYER_NETWORK_API_GENERAL=220]="PLAYER_NETWORK_API_GENERAL",e[e.PLAYER_CHROMECAST_API_GENERAL=230]="PLAYER_CHROMECAST_API_GENERAL",e[e.PLAYER_FUNCTIONS_GENERAL=300]="PLAYER_FUNCTIONS_GENERAL",e[e.PLAYER_FUNCTIONS_STARTOVER=301]="PLAYER_FUNCTIONS_STARTOVER",e[e.PLAYER_FUNCTIONS_SOURCE_FALLTHROUGH=302]="PLAYER_FUNCTIONS_SOURCE_FALLTHROUGH",e[e.PLAYER_FUNCTIONS_ADOBE_ANALYTICS_ERROR=303]="PLAYER_FUNCTIONS_ADOBE_ANALYTICS_ERROR",e[e.PLAYER_FUNCTIONS_CIM_ANALYTICS_ERROR=304]="PLAYER_FUNCTIONS_CIM_ANALYTICS_ERROR",e[e.PLAYER_FUNCTIONS_MEDIA_MELON_ANALYTICS_ERROR=305]="PLAYER_FUNCTIONS_MEDIA_MELON_ANALYTICS_ERROR",e[e.PLAYER_FUNCTIONS_AD_PLAYBACK=306]="PLAYER_FUNCTIONS_AD_PLAYBACK",e[e.PLAYER_YOUTUBE_ERROR_GENERAL=310]="PLAYER_YOUTUBE_ERROR_GENERAL",e[e.PLAYER_YOUTUBE_ERROR_INVALID_PARAM=311]="PLAYER_YOUTUBE_ERROR_INVALID_PARAM",e[e.PLAYER_YOUTUBE_ERROR_HTML5=312]="PLAYER_YOUTUBE_ERROR_HTML5",e[e.PLAYER_YOUTUBE_ERROR_VIDEO_NOT_FOUND=313]="PLAYER_YOUTUBE_ERROR_VIDEO_NOT_FOUND",e[e.PLAYER_YOUTUBE_ERROR_EMBED=314]="PLAYER_YOUTUBE_ERROR_EMBED",e[e.PLAYER_UI_TEMPLATE_ERROR=400]="PLAYER_UI_TEMPLATE_ERROR",e[e.GENERIC_ERROR=999]="GENERIC_ERROR"}(d||(d={}));var m,g=function(){},E=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),A=function(e){function t(){var t=e.call(this)||this;return t.ready=null,t.play=null,t.updateTitle=null,t.updateTick=null,t.adIsPlayingTick=null,t.promotionalIsPlayingTick=null,t.trailerIsPlayingTick=null,t.onboardingIsPlayingTick=null,t.normalContentIsPlayingTick=null,t.xCdnChanged=null,t.mediaReferenceChanged=null,t.showError=null,t.durationSet=null,t.nextupAnnounced=null,t.playlistSourceRequested=null,t.newIdentityTokenReceived=null,t.identityTokenUpdated=null,t.forceReload=null,t.tokenAcquired=null,t.reset=null,t.unLoad=null,t.destroy=null,t.criticalError=null,t.updateUserPreferences=null,Object.keys(t).forEach((function(e){t[e]={name:e}})),t}return E(t,e),t}(g),P=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),R=function(e){function t(){var t=e.call(this)||this;t.canplay=null,t.play=null,t.playing=null,t.pause=null,t.ended=null,t.seeking=null,t.seeked=null,t.volumechange=null,t.bufferingCompleted=null,t.timeupdate=null,t.error=null,t.firstplay=null,t.startover=null,t.adbreakbegin=null,t.adbreakend=null,t.adskipped=null,t.promotionalstarted=null,t.nextpromotionalstarted=null,t.promotionalended=null,t.promotionalskipped=null,t.fullscreenenter=null,t.fullscreenexit=null,t.castingstarted=null,t.castingstopped=null,t.buffering=null,t.qualitychanged=null,t.sourceloaded=null,t.sourcechanged=null,t.nextsourcerequested=null,t.previoussourcerequested=null,t.liveprogramchange=null,t.nextupannounced=null,t.nextupremoved=null,t.exiting=null,t.warning=null,t.playnotallowed=null,t.seekAllowed=null,t.seekNotAllowed=null;var n={};return Object.keys(t).forEach((function(e){var r={name:e,code:null};t[e]=r,n[e]=r})),t.dictionary=n,t}return P(t,e),t.prototype.getByName=function(e){return this.dictionary[e]},t}(g),w=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),S=function(e){function t(){var t=e.call(this)||this;return t.destroyApiCall=null,t.playApiCall=null,t.pauseApiCall=null,t.togglePlayApiCall=null,t.skipAdApiCall=null,t.toggleCastApiCall=null,t.toggleMuteApiCall=null,t.rewindSecondsApiCall=null,t.fastSeekApiCall=null,t.liveStartOverApiCall=null,t.toggleSubtitlesApiCall=null,t.toggleFullscreenApiCall=null,t.disableInterfaceApiCall=null,t.enableInterfaceApiCall=null,t.throwErrorApiCall=null,t.showTitleApiCall=null,t.nextApiCall=null,t.previousApiCall=null,t.gotoApiCall=null,t.addToPlaylistApiCall=null,t.setQualityApiCall=null,t.muteApiCallSet=null,t.muteApiCallGet=null,t.muteApiCallGetReturn=null,t.volumeApiCallSet=null,t.volumeApiCallGet=null,t.volumeApiCallGetReturn=null,t.durationApiCallGet=null,t.durationApiCallGetReturn=null,t.currentTimeApiCallSet=null,t.currentTimeApiCallGet=null,t.currentTimeApiCallGetReturn=null,t.currentDateTimeApiCallGet=null,t.currentDateTimeApiCallGetReturn=null,t.pausedApiCallGet=null,t.pausedApiCallGetReturn=null,t.loopApiCallSet=null,t.loopApiCallGet=null,t.loopApiCallGetReturn=null,t.currentSrcApiCallGet=null,t.currentSrcApiCallGetReturn=null,t.currentMediaReferenceApiCallGet=null,t.currentMediaReferenceApiCallGetReturn=null,t.srcApiCallSet=null,t.srcApiCallGet=null,t.srcApiCallGetReturn=null,t.seekableApiCallGet=null,t.seekableApiCallGetReturn=null,t.hasPlayedApiCallGet=null,t.hasPlayedApiCallGetReturn=null,t.controlsApiCallSet=null,t.controlsApiCallGet=null,t.controlsApiCallGetReturn=null,t.playlistSizeApiCallGet=null,t.playlistSizeApiCallGetReturn=null,t.currentPlaylistItemApiCallGet=null,t.currentPlaylistItemApiCallGetReturn=null,t.activeSubtitlesApiCallGet=null,t.activeSubtitlesApiCallGetReturn=null,t.availableQualitiesApiCallGet=null,t.availableQualitiesApiCallGetReturn=null,t.autoplayApiCallSet=null,t.autoplayApiCallGet=null,t.autoplayApiCallGetReturn=null,Object.keys(t).forEach((function(e){t[e]={name:e}})),t}return w(t,e),t}(g),T=function(){function e(e){this.map=new Map,this.errorHandler=new b(this,e)}return e.prototype.publish=function(e,t){if(void 0===t&&(t=null),e&&this.map.has(e))for(var n=0,r=this.map.get(e).slice();n<r.length;n++){var i=r[n],a=Object.assign({},e);null!=t&&(a.content=t);try{i(a)}catch(t){this.errorHandler.handleWarning(d.PLAYER_API_ERROR_EVENT_HANDLER,"Handler for "+e.name+" encountered an error!",{handler:i,handlerString:i.toString(),error:t})}}},e.prototype.addSubscriber=function(e,t){this.map.has(e)?this.map.get(e).push(t):this.map.set(e,[t])},e.prototype.addOneTimeSubscriber=function(e,t){var n=this;this.addSubscriber(e,(function r(i){n.removeSubscriber(e,r),t(i)}))},e.prototype.addOneTimeFirstOfMultipleEventsSubscriber=function(e,t){for(var n=this,r=function r(i){for(var a=0,o=e;a<o.length;a++){var l=o[a];n.removeSubscriber(l,r)}t(i)},i=0,a=e;i<a.length;i++){var o=a[i];this.addSubscriber(o,r)}},e.prototype.removeSubscriber=function(e,t){if(this.map.has(e)){var n=this.map.get(e),r=n.indexOf(t);r>=0&&n.splice(r,1)}},e.prototype.detectPublicEventTypeFromString=function(t){return e.publicPlayerEvents.getByName(t)},e.prototype.addRemovableEventListener=function(e,t,n){this.addSubscriber(t,n),e.push({event:t,handler:n})},e.publicPlayerEvents=new R,e.internalPlayerEvents=new A,e.apiCallEvents=new S,e}(),O=function(){function e(){}return e.wait=function(e){return new Promise((function(t){return setTimeout(t,e)}))},e.backoff=function(t,n,r){return n().catch((function(i){return t>1?e.wait(r).then((function(){return e.backoff(t-1,n,2*r)})):Promise.reject(i)}))},e.debounce=function(e,t){var n;return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];var a=function(){clearTimeout(n),e.apply(void 0,r)};clearTimeout(n),n=setTimeout(a,t)}},e}(),k=function(){function e(e){this.type=e,this.executionQueue=[]}return e.prototype.executeOrQueue=function(e,t){this.isLoadedAndCanExecute()?(this.clearQueue(e),t(e)):this.executionQueue.push(t)},e.prototype.clearQueue=function(e){for(;this.executionQueue.length>0;)this.type,this.executionQueue.shift()(e)},e}(),C=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),I=function(e){function t(t,n,r,i){var a=e.call(this,"Adobe Analytics")||this;return a.window=window,a.playerStartupTime=0,a.lastBitRate=0,a.lastFramerate=0,a.eventHandlers=[],a.playerMode=t,a.publisher=i,a.pal=n,a.mediaInfo=r,a.sessionStarted=!1,a.blockEvents=!0,a.loadAdobeAnalytics(),a}return C(t,e),t.loadLibrary=function(){return new Promise((function(e,n){if(t.isAdobeAnalyticsLibraryLoaded())e();else{var r=document.createElement("script");r.type="text/javascript",r.onerror=function(){return e()},r.onload=function(){O.backoff(10,(function(){return t.isAdobeAnalyticsLibraryLoaded()?Promise.resolve():Promise.reject()}),10).catch((function(){e()})).then((function(){e()}))},r.src="https://assets.adobedtm.com/launch-ENf9fccf410c9541c68729607e1227ac39.min.js",document.head.appendChild(r)}}))},t.isAdobeAnalyticsLibraryLoaded=function(){var e=window;return e.Visitor&&e.AppMeasurement&&e.ADB&&e.ADB.MediaHeartbeat&&e.ADB.MediaHeartbeatDelegate},t.prototype.destroy=function(){var e=this;this.eventHandlers.forEach((function(t){e.publisher.removeSubscriber(t.event,t.handler)})),this.eventHandlers=[],this.executeOrQueue(this.mediaHeartbeat,(function(t){e.heartbeatDelegate&&(e.heartbeatDelegate.getCurrentPlaybackTime=function(){},e.heartbeatDelegate.getQoSObject=function(){})}))},t.prototype.isLoadedAndCanExecute=function(){return t.isAdobeAnalyticsLibraryLoaded&&this.mediaHeartbeat&&!this.blockEvents},t.prototype.loadAdobeAnalytics=function(){var e=this,n=setInterval((function(){if(t.isAdobeAnalyticsLibraryLoaded()){clearInterval(n);var r=void 0;try{e.MediaHeartbeat=e.window.ADB.MediaHeartbeat,e.heartbeatDelegate=e.createHeartbeatDelegate(),(r=e.MediaHeartbeat.getInstance(e.heartbeatDelegate)).config?r.config.debugLogging=!1:e.window.ADB.MediaHeartbeatConfig&&(r.config=new e.window.ADB.MediaHeartbeatConfig,r.config.debugLogging=!1)}catch(t){return void e.publisher.errorHandler.handleWarning(d.PLAYER_FUNCTIONS_ADOBE_ANALYTICS_ERROR,"warning-adobe-analytics-could-not-be-loaded",t)}r.then((function(t){e.mediaHeartbeat=t,e.clearQueue(e.mediaHeartbeat);var n=e.mediaHeartbeat._config,r=e.mediaInfo.digitalData;r&&r.page&&r.page.brand_technology?(n.ovp=r.page.brand_technology,n.channel=r.page.brand_technology):(n.ovp=window.location.hostname,n.channel=window.location.hostname)})).catch((function(t){e.publisher.errorHandler.handleWarning(d.PLAYER_FUNCTIONS_ADOBE_ANALYTICS_ERROR,"warning-adobe-analytics-could-not-be-loaded",t)}))}}),33);this.addInitialListeners()},t.prototype.createHeartbeatDelegate=function(){var e=new this.window.ADB.MediaHeartbeatDelegate;return e.getCurrentPlaybackTime=this.updatePlaybackTime.bind(this),e.getQoSObject=this.updateQoS.bind(this),e},t.prototype.createMediaObject=function(){var e,t,n;if(this.mediaInfo.isLiveStream())e=this.MediaHeartbeat.StreamType.LIVE,n=86400;else switch(e=this.MediaHeartbeat.StreamType.VOD,n=this.mediaInfo.duration/1e3,this.playerMode){case u.VIDEO:t="Video",e=this.MediaHeartbeat.StreamType.VOD;break;case u.AUDIO:t="Audio",e=this.MediaHeartbeat.StreamType.AOD}var r=this.mediaInfo.overriddenAssetName?this.mediaInfo.overriddenAssetName:this.mediaInfo.getAssetName(),i={},a=this.mediaInfo.digitalData;a&&a.page&&(i[this.MediaHeartbeat.VideoMetadataKeys.SHOW]=a.page.program_name,i[this.MediaHeartbeat.VideoMetadataKeys.SEASON]=a.page.episode_season,i[this.MediaHeartbeat.VideoMetadataKeys.ASSET_ID]=a.page.episode_whatsonId,i[this.MediaHeartbeat.VideoMetadataKeys.GENRE]=a.page.label),i[this.MediaHeartbeat.VideoMetadataKeys.EPISODE]=r;var o=this.MediaHeartbeat.createMediaObject(r,this.mediaInfo.analyticsReference,n,e,t);return i[this.MediaHeartbeat.VideoMetadataKeys.STREAM_FORMAT]=t,o.setValue(this.MediaHeartbeat.MediaObjectKey.StandardVideoMetadata,i),o},t.prototype.createCustomMetadata=function(){var e,t,n=window.location.hostname,r="syndication",i=window.location.pathname,a=this.mediaInfo.digitalData;a&&a.page&&(a.page.brand_technology&&(n=a.page.brand_technology),a.page.channel&&(r=a.page.channel),a.page.brand_media&&(e=a.page.brand_media),a.page.page_uri&&(i=a.page.page_uri),a.page.program_whatsonId&&(t=a.page.program_whatsonId));var o={touchpointBrand:n,platform:r,contentBrand:e,pageName:i,program_whatsonid:t,playerVersion:"1.9.9-prod-2021-10-21T12:48:33"};return(null==a?void 0:a.media)&&Object.keys(a.media).forEach((function(e){o[e]=a.media[e]})),o},t.prototype.addInitialListeners=function(){var e=this;this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.sourcechanged,(function(){e.blockEvents=!0})),this.publisher.addRemovableEventListener(this.eventHandlers,T.internalPlayerEvents.durationSet,(function(){e.blockEvents=!1})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.canplay,(function(){})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.firstplay,(function(){e.playerStartupTime||(e.playerStartupTime=Date.now()),e.addPlaybackEventListeners(),e.sessionStarted=!0,e.executeOrQueue(e.mediaHeartbeat,(function(t){t.trackSessionStart(e.createMediaObject(),e.createCustomMetadata())}))}))},t.prototype.addPlaybackEventListeners=function(){var e=this;this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.play,(function(t){e.executeOrQueue(e.mediaHeartbeat,(function(e){e.trackPlay()}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.pause,(function(t){e.executeOrQueue(e.mediaHeartbeat,(function(e){e.trackPause()}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.seeking,(function(t){e.executeOrQueue(e.mediaHeartbeat,(function(t){t.trackEvent(e.MediaHeartbeat.Event.SeekStart)}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.seeked,(function(t){e.executeOrQueue(e.mediaHeartbeat,(function(t){t.trackEvent(e.MediaHeartbeat.Event.SeekComplete)}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.ended,(function(t){e.executeOrQueue(e.mediaHeartbeat,(function(e){e.trackComplete(),e.trackSessionEnd()}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.exiting,(function(t){e.executeOrQueue(e.mediaHeartbeat,(function(e){e.trackSessionEnd()}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.qualitychanged,(function(t){var n=e.pal.getActiveQuality();n&&(e.lastBitRate=n.bandwidth,n instanceof v&&(e.lastFramerate=n.framerate))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.adbreakbegin,(function(t){var n={affiliate:t.content.affiliate,campaign:t.content.campaign};e.executeOrQueue(e.mediaHeartbeat,(function(r){var i=e.MediaHeartbeat.createAdBreakObject(t.name,1,0),a=e.MediaHeartbeat.createAdObject(t.name,t.content.id,0,t.content.duration),o={};o[e.MediaHeartbeat.AdMetadataKeys.ADVERTISER]=t.content.advertiser,o[e.MediaHeartbeat.AdMetadataKeys.CAMPAIGN_ID]=t.content.campaign,a.setValue(e.MediaHeartbeat.MediaObjectKey.StandardAdMetadata,o),r.trackEvent(e.MediaHeartbeat.Event.AdBreakStart,i),r.trackEvent(e.MediaHeartbeat.Event.AdStart,a,n),r.trackPlay()}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.adbreakend,(function(t){e.executeOrQueue(e.mediaHeartbeat,(function(t){t.trackEvent(e.MediaHeartbeat.Event.AdComplete),t.trackEvent(e.MediaHeartbeat.Event.AdBreakComplete)}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.adskipped,(function(t){e.executeOrQueue(e.mediaHeartbeat,(function(t){t.trackEvent(e.MediaHeartbeat.Event.AdSkip)}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.liveprogramchange,(function(t){e.executeOrQueue(e.mediaHeartbeat,(function(t){t.trackComplete(),t.trackSessionEnd(),t.trackSessionStart(e.createMediaObject(),e.createCustomMetadata()),t.trackPlay()}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.promotionalstarted,(function(t){var n={affiliate:t.content.affiliate,campaign:t.content.campaign};e.executeOrQueue(e.mediaHeartbeat,(function(r){var i=e.MediaHeartbeat.createAdBreakObject(t.name,1,0),a=e.MediaHeartbeat.createAdObject(t.name,t.content.id,0,t.content.duration),o={};o[e.MediaHeartbeat.AdMetadataKeys.ADVERTISER]=t.content.advertiser,o[e.MediaHeartbeat.AdMetadataKeys.CAMPAIGN_ID]=t.content.campaign,a.setValue(e.MediaHeartbeat.MediaObjectKey.StandardAdMetadata,o),r.trackEvent(e.MediaHeartbeat.Event.AdBreakStart,i),r.trackEvent(e.MediaHeartbeat.Event.AdStart,a,n),r.trackPlay()}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.nextpromotionalstarted,(function(t){var n={affiliate:t.content.affiliate,campaign:t.content.campaign};e.executeOrQueue(e.mediaHeartbeat,(function(r){var i=e.MediaHeartbeat.createAdObject(t.name,t.content.id,0,t.content.duration),a={};a[e.MediaHeartbeat.AdMetadataKeys.ADVERTISER]=t.content.advertiser,a[e.MediaHeartbeat.AdMetadataKeys.CAMPAIGN_ID]=t.content.campaign,i.setValue(e.MediaHeartbeat.MediaObjectKey.StandardAdMetadata,a),r.trackEvent(e.MediaHeartbeat.Event.AdComplete),r.trackEvent(e.MediaHeartbeat.Event.AdStart,i,n),r.trackPlay()}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.promotionalended,(function(t){e.executeOrQueue(e.mediaHeartbeat,(function(t){t.trackEvent(e.MediaHeartbeat.Event.AdComplete),t.trackEvent(e.MediaHeartbeat.Event.AdBreakComplete)}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.internalPlayerEvents.destroy,(function(t){e.executeOrQueue(e.mediaHeartbeat,(function(t){e.heartbeatDelegate&&(e.heartbeatDelegate.getCurrentPlaybackTime=function(){},e.heartbeatDelegate.getQoSObject=function(){}),t.trackComplete(),t.trackSessionEnd()}))}))},t.prototype.updateQoS=function(){return this.MediaHeartbeat.createQoSObject(this.lastBitRate,this.playerStartupTime,this.lastFramerate,this.pal.getDroppedFrameCount())},t.prototype.updatePlaybackTime=function(){var e=this.pal.playHeadPosition();return isNaN(e)?0:e},t}(k),_=function(){function e(){}return e.extractDomain=function(e){return(e.indexOf("//")>-1?e.split("/")[2]:e.split("/")[0]).split(":")[0].split("?")[0]},e.doGet=function(e,t,n){var r=this;return new Promise((function(i,a){var o=new XMLHttpRequest;o.withCredentials=t,o.open("GET",e,!0),o.onerror=function(){a(o.responseText)},o.onreadystatechange=function(){4===o.readyState&&i({request:o,response:o.responseText?o.responseText:null})},r.addHeaders(o,n),o.send()}))},e.doPost=function(e,t,n,r){var i=this;return new Promise((function(a,o){var l=new XMLHttpRequest;l.withCredentials=t,l.open("POST",e,!0),l.onerror=function(){o({request:l,response:l.responseText?l.responseText:null})},l.onreadystatechange=function(){4===l.readyState&&a({request:l,response:l.responseText?l.responseText:null})},i.addHeaders(l,n),l.send(r)}))},e.addHeaders=function(e,t){if(t)for(var n=0,r=t;n<r.length;n++){var i=r[n];e.setRequestHeader(i.name,i.value)}},e}(),L=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))},N=function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},D=function(){function e(){}return e.isMobile=function(){var e,t=!1;return e=navigator.userAgent||navigator.vendor||window.opera,(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4)))&&(t=!0),t},e.isMobileOrTablet=function(){var e,t=!1;return e=navigator.userAgent||navigator.vendor||window.opera,(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4)))&&(t=!0),t},e.isAndroid=function(){if(e.isTheoPlayerLoaded()){var t=window;return t.THEOplayer.videojs.browser.IS_ANDROID||t.THEOplayer.videojs.browser.IS_NATIVE_ANDROID||t.THEOplayer.videojs.browser.IS_OLD_ANDROID}return/android/i.test(navigator.userAgent||navigator.vendor||window.opera)},e.isIOS=function(){return e.isTheoPlayerLoaded()?window.THEOplayer.videojs.browser.IS_IOS:!!navigator.platform&&/iPad|iPhone|iPod/.test(navigator.platform)},e.isChrome=function(){return e.isTheoPlayerLoaded()?window.THEOplayer.videojs.browser.IS_CHROME:"chrome"===e.detectBrowser()},e.isFireFox=function(){return e.isTheoPlayerLoaded()?window.THEOplayer.videojs.browser.IS_FIREFOX:"firefox"===e.detectBrowser()},e.isEdge=function(){return e.isTheoPlayerLoaded()?window.THEOplayer.videojs.browser.IS_EDGE:"edge"===e.detectBrowser()},e.isIE=function(){return e.isTheoPlayerLoaded()?null!==window.THEOplayer.videojs.browser.IE_VERSION:"ie"===e.detectBrowser()},e.isIEorEdge=function(){return e.isIE()||e.isEdge()},e.isSafari=function(){return e.isTheoPlayerLoaded()?window.THEOplayer.videojs.browser.IS_ANY_SAFARI:"safari"===e.detectBrowser()},e.fixIE=function(e){e.classList.add("video-js"),e.classList.add("theoplayer-skin")},e.getPlatform=function(){var e=this.isMobile(),t=this.isMobileOrTablet();return e&&t?"phone":!e&&t?"tablet":"desktop"},e.loadPolyfills=function(e){var t=window,n=document.createElement("script");n.type="text/javascript",n.onerror=e,n.onload=function(){var n=setInterval((function(){t.Promise&&(clearInterval(n),e())}),10)},n.src="https://polyfill.io/v3/polyfill.min.js?features=Array.from%2CArray.prototype.forEach%2CNodeList.prototype.forEach%2CCustomEvent%2CElement.prototype.remove%2CNumber.isNaN%2CObject.assign%2CPromise%2CArray.prototype.includes%2CString.prototype.includes%2CObject.values%2CNodeList.prototype.forEach%2CString.prototype.repeat%2CString.prototype.startsWith",document.head.appendChild(n)},e.loadLibrariesSequential=function(e,t){return void 0===t&&(t=!1),L(this,void 0,void 0,(function(){var n,r,i;return N(this,(function(a){switch(a.label){case 0:a.trys.push([0,5,,6]),n=0,r=e,a.label=1;case 1:return n<r.length?(i=r[n],[4,this.loadLibrary(i,{})]):[3,4];case 2:a.sent(),a.label=3;case 3:return n++,[3,1];case 4:return[3,6];case 5:if(a.sent(),!t)throw new Error;return[3,6];case 6:return[2]}}))}))},e.loadLibraryOnCondition=function(e,t,n){return void 0===n&&(n=!1),t?this.loadLibrary(e,{},!0):n?Promise.resolve():Promise.reject()},e.loadLibrary=function(e,t,n,r){return void 0===n&&(n=!1),void 0===r&&(r=null),new Promise((function(i,a){var o=document.createElement("script");if(o.type="text/javascript",o.onerror=n?function(){return i()}:function(){return a()},o.onload=function(){r||i()},r&&(window[r]=function(){i()}),t&&t.attributes)for(var l=0,s=Object.keys(t.attributes);l<s.length;l++){var u=s[l];o[u]=t.attributes[u]}o.src=e,document.head.appendChild(o)}))},e.loadCSS=function(e){return L(this,void 0,void 0,(function(){var t,n,r;return N(this,(function(i){switch(i.label){case 0:return[4,_.doGet(e,!1,[])];case 1:return t=i.sent().response,n=document.head||document.getElementsByTagName("head")[0],r=document.createElement("style"),n.appendChild(r),r.type="text/css",r.appendChild(document.createTextNode(t)),[2]}}))}))},e.getCdnUrl=function(){var e="";return document.querySelectorAll("script").forEach((function(t){t.src.search(/media-services-public-dev.vrt.be\/mediaplayer|media-services-public-stag.vrt.be\/mediaplayer|media-services-public.vrt.be\/mediaplayer|player-dev.vrt.be|player-stag.vrt.be|player.vrt.be/g)>-1&&(e=t.src.replace("/js/main.js",""))})),e+"/"},e.getSiteUrlReducedToFirstPathItem=function(){return window.location.hostname+(window.location.pathname.length>0?window.location.pathname.split("/")[0]:"")},e.isLocalStorageAvailable=function(){if(null!==this.localStorageAvailable)return this.localStorageAvailable;try{return localStorage.setItem("vrt-mediaplayer-dummy","dummy-value"),localStorage.removeItem("vrt-mediaplayer-dummy"),this.localStorageAvailable=!0,!0}catch(e){return this.localStorageAvailable=!1,!1}},e.detectBrowser=function(){var e=navigator.userAgent.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);return navigator.userAgent.match(/Edge/i)||navigator.userAgent.match(/edg/i)?"edge":navigator.userAgent.match(/Trident.*rv[ :]*11\./i)?"ie":e&&e.length>=2?e[1].toLowerCase():""},e.isTheoPlayerLoaded=function(){var e=window;return e&&e.THEOplayer&&e.THEOplayer.videojs&&e.THEOplayer.videojs.browser},e.localStorageAvailable=null,e}(),x=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),G=function(e){function t(t,n,r,i,a,o){var l=e.call(this,"CIM Analytics")||this;l.window=window,l.eventHandlers=[],l.playerMode=t,l.publisher=a,l.playerId=n.getAttribute("data-id"),l.pal=r,l.mediaInfo=i,l.cimId=o,l.sessionStarted=!1;var s=0,u=setInterval((function(){l.window.GemiusPlayer?(clearInterval(u),l.gemiusPlayer=new window.GemiusPlayer("VRT-MediaPlayer",l.cimId,{currentDomain:window.location,volume:l.getVolumeForGemius(),resolution:n.offsetWidth+"x"+n.offsetHeight}),l.gemiusPlayer.setVideoObject(null),l.clearQueue(l.gemiusPlayer)):s++>=60&&(clearInterval(u),l.publisher.errorHandler.handleWarning(d.PLAYER_FUNCTIONS_CIM_ANALYTICS_ERROR,"warning-cim-analytics-could-not-be-loaded"))}),33);return l.addListeners(),l}return x(t,e),t.loadLibrary=function(){return D.loadLibrary("https://gabe.hit.gemius.pl/gplayer.js",{},!0)},t.prototype.destroy=function(){var e=this;this.eventHandlers.forEach((function(t){e.publisher.removeSubscriber(t.event,t.handler)})),this.eventHandlers=[]},t.prototype.isLoadedAndCanExecute=function(){return this.gemiusPlayer},t.prototype.addListeners=function(){var e=this;this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.firstplay,(function(){e.addPlaybackEventListeners()}))},t.prototype.addPlaybackEventListeners=function(){var e=this,t=function(n){if(e.pal.isPlaying()){var r=function(t){var n=e.sessionStarted||e.mediaInfo.isLiveStream()?e.pal.playHeadPosition():0;e.executeOrQueue(e.gemiusPlayer,(function(t){t.newProgram(e.mediaInfo.analyticsReference,e.createAdditionalProgramParameters()),t.programEvent(e.mediaInfo.analyticsReference,n,"play",e.createAdditionalPlayParameters())})),e.sessionStarted=!0};e.mediaInfo.isLiveStream()?e.publisher.addOneTimeSubscriber(T.publicPlayerEvents.seeked,r):r()}else e.publisher.addOneTimeSubscriber(T.internalPlayerEvents.normalContentIsPlayingTick,t)};this.publisher.addOneTimeSubscriber(T.internalPlayerEvents.normalContentIsPlayingTick,t),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.adbreakbegin,(function(){e.executeOrQueue(e.gemiusPlayer,(function(t){t.programEvent(e.mediaInfo.analyticsReference,e.pal.playHeadPosition(),"break")}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.adbreakend,(function(){})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.play,(function(t){e.executeOrQueue(e.gemiusPlayer,(function(t){t.programEvent(e.mediaInfo.analyticsReference,e.pal.playHeadPosition(),"play",e.createAdditionalPlayParameters())}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.pause,(function(t){e.sessionStarted&&e.executeOrQueue(e.gemiusPlayer,(function(t){t.programEvent(e.mediaInfo.analyticsReference,e.pal.playHeadPosition(),"pause")}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.seeking,(function(t){e.sessionStarted&&e.executeOrQueue(e.gemiusPlayer,(function(t){t.programEvent(e.mediaInfo.analyticsReference,e.pal.playHeadPosition(),"seek")}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.buffering,(function(t){e.sessionStarted&&e.executeOrQueue(e.gemiusPlayer,(function(t){t.programEvent(e.mediaInfo.analyticsReference,e.pal.playHeadPosition(),"buffer")}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.bufferingCompleted,(function(t){e.sessionStarted&&e.executeOrQueue(e.gemiusPlayer,(function(t){t.programEvent(e.mediaInfo.analyticsReference,e.pal.playHeadPosition(),"play")}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.ended,(function(n){e.sessionStarted&&(e.sessionStarted=!1,e.publisher.addOneTimeSubscriber(T.internalPlayerEvents.normalContentIsPlayingTick,t),e.executeOrQueue(e.gemiusPlayer,(function(t){t.programEvent(e.mediaInfo.analyticsReference,e.getDuration(),"complete")})))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.exiting,(function(t){e.sessionStarted&&(e.sessionStarted=!1,e.executeOrQueue(e.gemiusPlayer,(function(t){t.programEvent(e.mediaInfo.analyticsReference,e.pal.playHeadPosition(),"close")})))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.liveprogramchange,(function(t){e.sessionStarted&&(e.executeOrQueue(e.gemiusPlayer,(function(t){t.programEvent(e.mediaInfo.analyticsReference,e.getDuration(),"complete")})),e.executeOrQueue(e.gemiusPlayer,(function(t){t.newProgram(e.mediaInfo.analyticsReference,e.createAdditionalProgramParameters())})))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.volumechange,(function(t){e.sessionStarted&&e.executeOrQueue(e.gemiusPlayer,(function(n){n.programEvent(e.mediaInfo.analyticsReference,e.pal.playHeadPosition(),{volume:e.getVolumeForGemius(t.content.volume)})}))})),this.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.qualitychanged,(function(t){e.sessionStarted&&e.executeOrQueue(e.gemiusPlayer,(function(n){t.content.video&&n.programEvent(e.mediaInfo.analyticsReference,e.pal.playHeadPosition(),{resolution:t.content.video.width+"x"+t.content.video.height})}))}))},t.prototype.getDuration=function(){var e=0;return this.mediaInfo&&(e=this.mediaInfo.isLiveStream()?-1:this.mediaInfo.duration/1e3),e},t.prototype.createAdditionalPlayParameters=function(){var e=this.pal.getActiveQuality(),t="";return e&&e.hasOwnProperty("width")&&(t=e.width+"x"+e.height),{autoPlay:!1,partId:1,resolution:t,volume:this.getVolumeForGemius()}},t.prototype.createAdditionalProgramParameters=function(){var e=this.mediaInfo.digitalData,t=this.playerMode===u.VIDEO?"Video":"Audio";return{programType:t,programDuration:this.getDuration(),programName:this.mediaInfo.overriddenAssetName?this.mediaInfo.overriddenAssetName:this.mediaInfo.getAssetName("nietingevuld"),se:this.getSiteSection(),ct:this.getContentType(t,e),st:this.getSourceType(t,this.mediaInfo.isLiveStream(),this.getDuration()),tv:e&&e.page?e.page.episode_whatsonId:"nietingevuld",channel:this.getChannelNameForGemius()}},t.prototype.getVolumeForGemius=function(e){return e?0===e?-1:Math.round(100*e):0===this.pal.getVolume()?-1:Math.round(100*this.pal.getVolume())},t.prototype.getChannelNameForGemius=function(){var e,t,n,r,i="nietingevuld";switch((null===(e=this.mediaInfo)||void 0===e?void 0:e.channelId)?i=this.mediaInfo.channelId:(null===(r=null===(n=null===(t=this.mediaInfo)||void 0===t?void 0:t.digitalData)||void 0===n?void 0:n.page)||void 0===r?void 0:r.brand_media)&&(i=this.mediaInfo.digitalData.page.brand_media),i=i.toLowerCase()){case"één":case"vualto_een_geo":case"vualto_een_drm":return"een";case"vualto_canvas_geo":case"vualto_canvas_drm":return"canvas";case"vualto_ketnet_geo":case"vualto_ketnet_drm":case"ketnet_jr":return"ketnet";default:return i}},t.prototype.getContentType=function(e,t){var n,r;return(null===(n=null==t?void 0:t.media)||void 0===n?void 0:n.contentType)?null===(r=null==t?void 0:t.media)||void 0===r?void 0:r.contentType:"Video"===e?"ce/tv":"ce/radio"},t.prototype.getSourceType=function(e,t,n){return"Video"===e?t?"vid.tvi.live.free":n/60>8?"vid.tvi.ep.vod.free":"vid.wex.frag.vod.free":t?"aud.rai.live.free":n/60>8?"aud.rai.ep.free":"aud.wex.frag.free"},t.prototype.getSiteSection=function(){var e,t;return(null===(t=null===(e=this.mediaInfo)||void 0===e?void 0:e.digitalData)||void 0===t?void 0:t.page)?this.mediaInfo.digitalData.page.siteSection_1+" - "+this.mediaInfo.digitalData.page.siteSection_2:"nietingevuld"},t}(k),M=function(){function e(e,t,n,r){this.sources=e,this.ads=t,this.textTracks=n,this.metaData=r}return e.prototype.getSource=function(){return this.sources.hasOwnProperty("length")?this.sources[0]:this.sources},e}(),V=function(){function e(e,t,n,r,i,a,o,l,s,u,c,p,d){this.mediaReference=e,this.aspectRatio=t,this.channelId=n,this.chaptering=r,this.drm=i,this.drmExpired=a,this.duration=o,this.mediaSections=l,this.posterImageUrl=s,this.shortDescription=u,this.skinType=c,this.targetUrls=p,this.sources=null,this.currentSource=null,this.title=d,this.liveSchedule=[],this.activeScheduleItem=null,this.activePlaylistItem=null,this.remainingPlaylistItemDuration=0}return e.createDummyMediaInfo=function(){var t=new e(null,null,null,null,null,new Date,0,null,null,null,null,[],null);return t.currentSource=new M({src:null,type:null,contentProtection:null},null,null,null),t},e.prototype.isLiveStream=function(){return this.skinType===m.LIVE},e.prototype.isLiveToUrl=function(){if(this.targetUrls)for(var e=0,t=this.targetUrls;e<t.length;e++){var n=t[e];if(n.url&&n.url.search("t=")>-1)return!0}return!1},e.prototype.getAssetName=function(e){var t=e||this.title;if(this.digitalData)if(this.isLiveStream())t=this.mediaReference+" - livestream";else if(this.digitalData&&this.digitalData.page){var n="";if(this.digitalData.page.episode_broadcast_date){var r=new Date(this.digitalData.page.episode_broadcast_date);n=(r.getDate()<10?"0"+r.getDate():r.getDate()+"")+"/"+(r.getMonth()+1<10?"0"+(r.getMonth()+1):r.getMonth()+1+"")+"/"+(r.getFullYear()+"").substring(2)}t=this.digitalData.page.program_name+" - "+n+" "+this.digitalData.page.episode_name}return t},e.prototype.getAssetId=function(){return this.mediaReference.split("$").shift()},e.prototype.mapToPublicMediaInfo=function(){return{analyticsReference:this.analyticsReference,aspectRatio:this.aspectRatio,channelId:this.channelId,duration:this.duration,mediaReference:this.mediaReference,posterImageUrl:this.posterImageUrl,shortDescription:this.shortDescription,title:this.title}},e.prototype.getRealSeekTime=function(e){if(this.mediaSections&&this.mediaSections.content.length>0){this.mediaSections;for(var t=0,n=0,r=this.mediaSections.content;n<r.length;n++){var i=r[n];if("STANDARD"===i.eventType)break;t+=i.duration/1e3}return t+e}return e},e}();!function(e){e.VOD="vod",e.LIVE="live"}(m||(m={}));var H,U=function(e,t,n){this.src=e,this.type=t,this.contentProtection=n},F=function(){function e(){}return e.extractVrtVodReference=function(e){return e.split(/%24|\$/g).pop()},e.extractVrtLiveReference=function(e){var t=e.split(/(\/live\/)|(\/live\.)/g);return t.length>1?t[t.length-4]:e},e.extractStandaloneReference=function(e){var t=null,n=e.split(/(vod\/)|(-CDN_1\/)/g);return n.length>1?t=n[n.length-4]:(t=e.split("/").pop()).substr(0,64),t},e.extractYoutubeReference=function(e){return e.replace("watch?v=","embed/").replace("http://youtu.be/","https://www.youtube.com/embed/").split("/").pop()},e}(),j=function(){this.streamTypeMapping={mpeg_dash:{name:"mpeg_dash",mediaType:"application/dash+xml",mdpFirstSortOrder:100,hlsFirstSortOrder:1,hlsAesFirstSortOrder:1},hls:{name:"hls",mediaType:"application/x-mpegURL",mdpFirstSortOrder:10,hlsFirstSortOrder:100,hlsAesFirstSortOrder:10},hls_aes:{name:"hls_aes",mediaType:"",mdpFirstSortOrder:1,hlsFirstSortOrder:10,hlsAesFirstSortOrder:100}}},q=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),B=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return q(t,e),t.prototype.mapSources=function(e,t){return[]},t.prototype.getNextSource=function(e,t){return e.sources&&e.sources.length>0?new M(e.sources.shift(),[t],null,null):null},t.prototype.getStartOverSource=function(e,t){return null},t.prototype.canDoStartOver=function(e){return!1},t}(j),Y=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))},Q=function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},z=function(){function e(e,t,n,r){this.config=e,this.publisher=t,this.playlistItem=n,this.sourceService=r}return e.prototype.enrichMedia=function(e){return Y(this,void 0,void 0,(function(){return Q(this,(function(e){return[2,Promise.reject("Operation not supported!")]}))}))},e.prototype.prepareSources=function(e){},e.prototype.updateMediaEnrichment=function(e,t){},e.prototype.autoUpdateLiveSchedule=function(e,t,n){},e.prototype.isVRT=function(){return!1},e.prototype.isStandAloneVideo=function(){return!1},e.prototype.isYouTube=function(){return!1},e.prototype.destroy=function(){},e}(),K=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),W=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))},J=function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},X=function(e){function t(t,n,r){var i=e.call(this,t,n,r,new B)||this;return i.mediaInfo=new Promise((function(e,t){return W(i,void 0,void 0,(function(){var n,r;return J(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),n=e,[4,this.enrichMedia()];case 1:return n.apply(void 0,[i.sent()]),[3,3];case 2:return r=i.sent(),t(r),[3,3];case 3:return[2]}}))}))})),i}return K(t,e),t.prototype.enrichMedia=function(){return W(this,void 0,void 0,(function(){var e,t;return J(this,(function(n){return e=this.playlistItem.mediaReference,(t=new V(e,null,null,null,null,null,-1,null,"","",m.VOD,null,"Video")).analyticsReference=F.extractStandaloneReference(e),t.overriddenAssetName=this.config.analyticsAssetNameOverride?this.config.analyticsAssetNameOverride:null,t.digitalData=this.playlistItem.digitalData,t.targetUrls=[{type:null,url:e}],t.sources=[new U(e,null,null)],[2,t]}))}))},t.prototype.prepareSources=function(e){e.sources=[new U(e.mediaReference,null,null)],e.sources},t.prototype.updateMediaEnrichment=function(e,t){var n=e.getDuration();isNaN(n)||(t.duration=n)},t.prototype.isStandAloneVideo=function(){return!0},t}(z),Z=function(){function e(e,t){this.vrtPlayerToken=e,this.expirationDate=t}return e.prototype.hasNotExpired=function(){return Date.now()<new Date(this.expirationDate).getTime()},e.prototype.isNotWorldWide=function(){return this.vrtPlayerToken.search(/^([vbe])/)>=0},e}(),$=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))},ee=function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},te=function(){function e(e,t,n){this.aggregatorUrl=e,this.isV2Aggregator=n,this.publisher=t,this.playerTokenStorageName=this.isV2Aggregator?"vrtPlayerTokenV2":"vrtPlayerToken"}return e.clearToken=function(){D.isLocalStorageAvailable()&&(localStorage.removeItem("vrtPlayerToken"),localStorage.removeItem("vrtPlayerTokenV2"))},e.loadStoredToken=function(e){var t,n=(null==e?void 0:e.search("v2"))>-1?"vrtPlayerTokenV2":"vrtPlayerToken";if(D.isLocalStorageAvailable()&&(t=localStorage.getItem(n)),t)try{return Object.setPrototypeOf(JSON.parse(t),Z.prototype)}catch(e){throw new Error("The current token is corrupt")}return null},e.prototype.getToken=function(t){return $(this,void 0,void 0,(function(){var n,r;return ee(this,(function(i){switch(i.label){case 0:try{e.lastIdentityToken=t,n=e.loadStoredToken()}catch(e){this.publisher.errorHandler.handleWarning(d.AGGREGATOR_TOKEN_ERROR_STORED_TOKEN_MALFORMED,"warning-the-current-token-is-corrupt",{error:e}),n=null}if(this.tokenIsValid(n))return[3,4];i.label=1;case 1:if(i.trys.push([1,3,,4]),null===t)throw new Error("Invalid identity token!");return[4,this.requestNewToken(t)];case 2:return n=i.sent(),D.isLocalStorageAvailable()&&localStorage.setItem(this.playerTokenStorageName,JSON.stringify(n)),[3,4];case 3:throw r=i.sent(),new Error("Cannot retrieve a new player token: "+r);case 4:return this.publisher.publish(T.internalPlayerEvents.tokenAcquired),[2,n]}}))}))},e.prototype.tokenIsValid=function(e){return e&&e.isNotWorldWide()&&e.hasNotExpired()},e.prototype.requestNewToken=function(e){return $(this,void 0,void 0,(function(){var t,n,r,i;return ee(this,(function(a){switch(a.label){case 0:e?(t=JSON.stringify({identityToken:e}),n=!1):(t=null,n=!0),a.label=1;case 1:return a.trys.push([1,3,,4]),[4,_.doPost(this.aggregatorUrl+"/tokens",n,[{name:"Content-Type",value:"application/json"}],t)];case 2:if(200===(r=a.sent()).request.status)return[2,Object.setPrototypeOf(JSON.parse(r.response),Z.prototype)];throw new Error;case 3:throw i=a.sent(),r?this.publisher.errorHandler.handleError(d.AGGREGATOR_TOKEN_ERROR_CANNOT_GET_TOKEN,"errors-a-token-could-not-be-retrieved",JSON.parse(r.response)):this.publisher.errorHandler.handleError(d.AGGREGATOR_TOKEN_ERROR_CANNOT_GET_TOKEN,"errors-a-token-could-not-be-retrieved",i.response),new Error("Cannot fetch token!");case 4:return[2]}}))}))},e}(),ne=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))},re=function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},ie=function(){function e(e,t,n){this.aggregatorUrl=e,this.isV2Aggregator=(null==e?void 0:e.search("v2"))>-1,this.identityToken=t,this.publisher=n,this.tokenUtils=new te(e,n,this.isV2Aggregator)}return e.prototype.aggregateMedia=function(e,t){return ne(this,void 0,void 0,(function(){var n;return re(this,(function(r){switch(r.label){case 0:return r.trys.push([0,3,,4]),[4,this.tokenUtils.getToken(this.identityToken)];case 1:return n=r.sent(),[4,this.getMediaInfo(e,t,n)];case 2:return[2,r.sent()];case 3:throw r.sent(),new Error("Cannot aggregate media!");case 4:return[2]}}))}))},e.prototype.getMediaInfo=function(e,t,n){return ne(this,void 0,void 0,(function(){var r,i,a,o;return re(this,(function(l){switch(l.label){case 0:r=null,l.label=1;case 1:return l.trys.push([1,3,,4]),[4,_.doGet(this.aggregatorUrl+"/videos/"+e+"?vrtPlayerToken="+n.vrtPlayerToken+"&client="+t,!1,null)];case 2:if(200===(r=l.sent()).request.status)return(i=JSON.parse(r.response)).mediaSections=i.playlist,delete i.playlist,(a=Object.setPrototypeOf(i,V.prototype)).drmExpired&&(a.drmExpired=new Date(a.drmExpired)),a.mediaReference=e,[2,a];throw new Error;case 3:throw l.sent(),o=this.isV2Aggregator?this.publisher.errorHandler.handleErrorFromV2Aggregator.bind(this):this.publisher.errorHandler.handleErrorFromAggregator.bind(this),r?o(r.request,r.response):o(null,null),new Error("Cannot get info from aggregator!");case 4:return[2]}}))}))},e}(),ae=function(e,t,n){this.integration=e,this.token=t,this.widevine=n.widevine,this.playready=n.playready,this.fairplay=n.fairplay},oe=function(){function e(e){this.widevineDrm={certificateURL:null,licenseAcquisitionURL:"https://widevine-proxy.drm.technology/proxy",useCredentials:!1},this.fairplayDrm={certificateURL:"https://fairplay-license.drm.technology/certificate",licenseAcquisitionURL:"https://fairplay-license.drm.technology/license",useCredentials:!1},this.playreadyDrm={certificateURL:null,licenseAcquisitionURL:"https://playready-license.drm.technology/rightsmanager.asmx",useCredentials:!1},this.integration=e}return e.prototype.generateDrmConfig=function(e){return new ae(this.integration,e,this.determineDRMForBrowser(e))},e.prototype.determineDRMForBrowser=function(e){var t={widevine:null,fairplay:null,playready:null};return e&&(t.widevine=this.widevineDrm,t.fairplay=this.fairplayDrm,t.playready=this.playreadyDrm),t},e.isDrmTokenAboutToExpire=function(e){if(e){var t=e.getTime()-Date.now();return t<=0||t<1e3*parseInt("30",10)}return!1},e.remapAESTokenOntoLicenseRequest=function(e,t){if(e){var n=e.toLowerCase();return t?-1===n.indexOf("getkey")||-1!==n.indexOf("token=")?e:e+(-1===n.indexOf("?")?"?":"&")+"token="+encodeURIComponent(t):e}return null},e}(),le=function(e){e&&(this.title=e)},se=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))},ue=function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},ce=function(){function e(e,t){this.aggregatorUrl=e,this.errorHandler=t,this.noBroadCast=new le("Geen uitzending")}return e.prototype.mapMediaSections=function(e){this.mediaSections=e;for(var t=0;t<e.content.length;t++)e.content[t].index=t;this.mapPlaylistDurationsToPlaytime(),this.determineDurationPerBlock()},e.prototype.getRemainingBlockDuration=function(e){var t=this.getActivePlaylistItem(1e3*e);if(t){for(var n=void 0,r=0,i=this.playlistDurationMappingPerBlock;r<i.length;r++){var a=i[r];if(a.playListIndexes.indexOf(t.item.index)>=0){n=a.playListIndexes[a.playListIndexes.length-1];break}}var o=this.playlistTimeMapping[n];return{activePlaylistItem:t,remainingBlockDuration:Math.round((o-1e3*e)/1e3)}}return{activePlaylistItem:null,remainingBlockDuration:NaN}},e.prototype.getLiveSchedule=function(e){return se(this,void 0,void 0,(function(){var t,n,r;return ue(this,(function(i){switch(i.label){case 0:t=null,this.liveScheduleLastModified&&(t=[{name:"If-Modified-Since",value:this.liveScheduleLastModified}]),n=null,i.label=1;case 1:return i.trys.push([1,3,,4]),[4,_.doGet(this.aggregatorUrl+"/channels/"+e,!0,t)];case 2:if(200===(n=i.sent()).request.status)return this.liveScheduleLastModified=n.request.getResponseHeader("last-modified"),[2,JSON.parse(n.response).schedule];if(304===n.request.status)return[2,null];if(n.request.status>399)throw new Error;return[3,4];case 3:throw r=i.sent(),n?this.errorHandler.handleError(d.AGGREGATOR_SCHEDULE_ERROR_CANNOT_GET_SCHEDULE,"errors-the-program-schedule-cannot-be-retrieved",JSON.parse(n.response)):this.errorHandler.handleError(d.AGGREGATOR_SCHEDULE_ERROR_CANNOT_GET_SCHEDULE,"errors-the-program-schedule-cannot-be-retrieved",r),new Error("The program schedule could not be retrieved!");case 4:return[2]}}))}))},e.prototype.getActiveScheduleItem=function(e){if(e&&e.length>0){for(var t=Date.now(),n=0;n<e.length;n++){var r=e[n],i=new Date(r.time).getTime(),a=e[n+1],o=t+1;if(n<e.length-1&&(o=new Date(a.time).getTime()),t>=i&&t<o)return r}return this.noBroadCast}return null},e.prototype.mapPlaylistDurationsToPlaytime=function(){this.playlistTimeMapping=[];for(var e=0;e<this.mediaSections.content.length;e++){var t=this.mediaSections.content[e],n=0;this.playlistTimeMapping.length>0&&(n=this.playlistTimeMapping[e-1]),this.playlistTimeMapping.push(n+t.duration)}},e.prototype.determineDurationPerBlock=function(){this.playlistDurationMappingPerBlock=[];for(var e=0;e<this.mediaSections.content.length;){var t=this.mediaSections.content[e],n={duration:t.duration,playListIndexes:[e]};this.playlistDurationMappingPerBlock.push(n);for(var r=e+1;r<this.mediaSections.content.length;r++){if(t.eventType.toLowerCase()!==this.mediaSections.content[r].eventType.toLowerCase()){(e=r)===this.mediaSections.content.length-1&&(e=this.mediaSections.content.length,this.playlistDurationMappingPerBlock.push({duration:t.duration,playListIndexes:[e-1]}));break}n.playListIndexes.push(r),n.duration+=this.mediaSections.content[r].duration,r===this.mediaSections.content.length-1&&(e=this.mediaSections.content.length)}}},e.prototype.getActivePlaylistItem=function(e){for(var t=0;t<this.playlistTimeMapping.length;t++)if(e<=this.playlistTimeMapping[t]){var n=!1,r=null;return this.previousMediaSection?this.previousMediaSection&&this.previousMediaSection.eventType!==this.mediaSections.content[t].eventType?(n=!0,r=this.previousMediaSection.eventType,this.previousMediaSection=this.mediaSections.content[t]):this.previousMediaSection&&this.previousMediaSection.eventType===this.mediaSections.content[t].eventType&&this.previousMediaSection.index!==this.mediaSections.content[t].index&&(n=!1,r=this.previousMediaSection.eventType,this.previousMediaSection=this.mediaSections.content[t]):(n=!0,r=null,this.previousMediaSection=this.mediaSections.content[t]),{item:this.mediaSections.content[t],typeChanged:n,previousType:r}}return null},e.types={PROMOTIONAL:"promotional",STANDARD:"standard",TRAILER:"trailer",ONBOARDING:"onboarding"},e}(),pe=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),de=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return pe(t,e),t.prototype.mapSources=function(e,t){var n=this;return e.targetUrls.sort((function(e,t){return D.isIOS()||D.isSafari()?n.streamTypeMapping[t.type].hlsFirstSortOrder-n.streamTypeMapping[e.type].hlsFirstSortOrder:D.isIE()||window.navigator.userAgent.search("Firefox/68.0")>-1?n.streamTypeMapping[t.type].hlsAesFirstSortOrder-n.streamTypeMapping[e.type].hlsAesFirstSortOrder:n.streamTypeMapping[t.type].mdpFirstSortOrder-n.streamTypeMapping[e.type].mdpFirstSortOrder})).map((function(e){return n.streamTypeMapping.hls_aes.name===e.type?new U(e.url,n.streamTypeMapping[e.type].mediaType,null):new U(e.url,n.streamTypeMapping[e.type].mediaType,t)}))},t.prototype.getNextSource=function(e,t,n,r,i){if(e.sources&&e.sources.length>0){var a=e.sources.shift();return n&&!0===n&&(a=this.getStartOverSource(e,a,r,i)),new M(a,[t],null,null)}return null},t.prototype.getStartOverSource=function(e,t,n,r){return n&&t?new U(t.src.split("?t=")[0]+="?t="+n+(r?"$"+r:""),t.type,t.contentProtection):this.canDoStartOver(e.activeScheduleItem)&&t?new U(t.src.split("?t=")[0]+="?t="+e.activeScheduleItem.time,t.type,t.contentProtection):null},t.prototype.canDoStartOver=function(e){return null!=e&&null!==e.time&&void 0!==e.time},t}(j),he=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ye=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))},fe=function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},ve=function(e){function t(t,n,r){var i=e.call(this,t,n,r,new de)||this;return i.programmingService=new ce(i.config.aggregatorUrl,i.publisher.errorHandler),i.aggregatorService=new ie(i.config.aggregatorUrl,i.config.identityToken,i.publisher),i.drmService=new oe("vudrm"),i.mediaInfo=new Promise((function(e,t){return ye(i,void 0,void 0,(function(){var n,r;return fe(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),n=e,[4,this.enrichMedia()];case 1:return n.apply(void 0,[i.sent()]),[3,3];case 2:return r=i.sent(),t(r),[3,3];case 3:return[2]}}))}))})),i}return he(t,e),t.prototype.enrichMedia=function(){return ye(this,void 0,void 0,(function(){var e,t,n;return fe(this,(function(r){switch(r.label){case 0:e=this.playlistItem.mediaReference,r.label=1;case 1:return r.trys.push([1,6,,7]),[4,this.aggregatorService.aggregateMedia(e,this.config.clientCode)];case 2:return(t=r.sent()).isLiveStream()?(n=t,[4,this.programmingService.getLiveSchedule(e)]):[3,4];case 3:return n.liveSchedule=r.sent(),t.activeScheduleItem=this.programmingService.getActiveScheduleItem(t.liveSchedule),t.analyticsReference=F.extractVrtLiveReference(e),[3,5];case 4:t.analyticsReference=F.extractVrtVodReference(e),this.programmingService.mapMediaSections(t.mediaSections),r.label=5;case 5:return t.overriddenAssetName=this.config.analyticsAssetNameOverride?this.config.analyticsAssetNameOverride:null,t.digitalData=this.playlistItem.digitalData,[2,t];case 6:throw r.sent(),new Error("Cannot enrich media!");case 7:return[2]}}))}))},t.prototype.prepareSources=function(e){var t=this.drmService.generateDrmConfig(e.drm);e.sources=this.sourceService.mapSources(e,t),e.sources},t.prototype.updateMediaEnrichment=function(e,t){if(t.isLiveStream())t.activeScheduleItem=this.programmingService.getActiveScheduleItem(t.liveSchedule);else{var n=this.programmingService.getRemainingBlockDuration(e.playHeadPosition());t.activePlaylistItem=n.activePlaylistItem,t.remainingPlaylistItemDuration=n.remainingBlockDuration,this.detectPromotionalProgress(e,t)}},t.prototype.autoUpdateLiveSchedule=function(e,t,n){var r=this;this.liveScheduleInterval=setInterval((function(){return ye(r,void 0,void 0,(function(){var e;return fe(this,(function(r){switch(r.label){case 0:return[4,this.programmingService.getLiveSchedule(this.playlistItem.mediaReference)];case 1:return(e=r.sent())&&(t.liveSchedule=e,t.activeScheduleItem=this.programmingService.getActiveScheduleItem(t.liveSchedule),n&&n()),[2]}}))}))}),1e3*e)},t.prototype.isVRT=function(){return!0},t.prototype.destroy=function(){clearInterval(this.liveScheduleInterval)},t.prototype.detectPromotionalProgress=function(e,t){this.isAdPlaying(e,t)||(this.isFirstPromotionalPlaying(t)?this.publisher.publish(T.publicPlayerEvents.promotionalstarted,{id:t.activePlaylistItem.item.index+"",name:"PROMOTIONAL-"+(t.activePlaylistItem.item.index+1),duration:t.activePlaylistItem.item.duration/1e3,resourceUri:null,affiliate:"PROMOTIONAL",campaign:"PROMOTIONAL",advertiser:"PROMOTIONAL"}):this.isNextPromotionalPlaying(t)?this.publisher.publish(T.publicPlayerEvents.nextpromotionalstarted,{id:t.activePlaylistItem.item.index+"",name:"PROMOTIONAL-"+t.activePlaylistItem.item.index,duration:t.activePlaylistItem.item.duration,resourceUri:null,affiliate:"PROMOTIONAL",campaign:"PROMOTIONAL",advertiser:"PROMOTIONAL"}):this.isMainContentPlayingAfterPromotionals(t)&&this.publisher.publish(T.publicPlayerEvents.promotionalended))},t.prototype.isAdPlaying=function(e,t){return!t.activePlaylistItem||e.isAdPlaying()},t.prototype.isFirstPromotionalPlaying=function(e){return e.activePlaylistItem.typeChanged&&e.activePlaylistItem.item&&e.activePlaylistItem.item.eventType.toLowerCase()===ce.types.PROMOTIONAL},t.prototype.isNextPromotionalPlaying=function(e){return!e.activePlaylistItem.typeChanged&&e.activePlaylistItem.previousType===ce.types.PROMOTIONAL&&e.activePlaylistItem.item&&e.activePlaylistItem.item.eventType.toLowerCase()===ce.types.PROMOTIONAL},t.prototype.isMainContentPlayingAfterPromotionals=function(e){return e.activePlaylistItem.typeChanged&&e.activePlaylistItem.previousType===ce.types.PROMOTIONAL&&e.activePlaylistItem.item&&(e.activePlaylistItem.item.eventType.toLowerCase()===ce.types.STANDARD||e.activePlaylistItem.item.eventType.toLowerCase()===ce.types.TRAILER)},t}(z),be=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),me=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))},ge=function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},Ee=function(e){function t(t,n,r){var i=e.call(this,t,n,r)||this;return i.mediaInfo=new Promise((function(e,t){return me(i,void 0,void 0,(function(){var n,r;return ge(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),n=e,[4,this.enrichMedia()];case 1:return n.apply(void 0,[i.sent()]),[3,3];case 2:return r=i.sent(),t(r),[3,3];case 3:return[2]}}))}))})),i}return be(t,e),t.prototype.enrichMedia=function(e){return me(this,void 0,void 0,(function(){var t,n;return ge(this,(function(r){return t=F.extractYoutubeReference(this.playlistItem.mediaReference),(n=new V(t,null,null,null,null,null,this.getDuration(e),null,"",t,m.VOD,[{type:"link",url:"https://www.youtube.com/watch?v="+t}],t)).analyticsReference=t,n.overriddenAssetName=this.config.analyticsAssetNameOverride?this.config.analyticsAssetNameOverride:null,n.digitalData=this.playlistItem.digitalData,[2,n]}))}))},t.prototype.isYouTube=function(){return!0},t.prototype.getDuration=function(e){return e?e.getDuration():-1},t}(z),Ae=function(){function e(){}return e.createMediaEnricher=function(e,t,n){var r=null==n?void 0:n.mediaReference;if(!r)throw new Error("Cannot create MediaEnricher, mediaReference is null!");return this.isStandAloneMediaReference(r)?new X(e,t,n):this.isYouTubeMediaReference(r)?new Ee(e,t,n):new ve(e,t,n)},e.isVrtMediaReference=function(t){return!!t&&(!e.isStandAloneMediaReference(t)&&!e.isYouTubeMediaReference(t))},e.isStandAloneMediaReference=function(e){return!!e&&(e.search("://")>=0&&(e.search(".m3u8")>=0||e.search(".mpd")>=0||e.search(".mp3")>=0||e.search(".mp4")>=0))},e.isYouTubeMediaReference=function(e){return!!e&&(e.search("youtube.com/watch")>=0||e.search("youtube.com/embed")>=0||e.search("youtu.be/")>=0)},e.validatePlaylist=function(t){if(t)for(var n=0,r=0,i=0,a=t.items;i<a.length;i++){var o=a[i];if(e.isStandAloneMediaReference(o)||e.isVrtMediaReference(o)?r++:n++,n>0&&r>0)throw new Error("Invalid playlist: a playlist can only contain non YouTube items or only YouTube items!")}},e}(),Pe=function(){function e(e,t,n,r){this.publisher=t,this.pal=e,this.mediaEnricher=n,this.pebbleService=r}return e.prototype.destroy=function(){},e}(),Re=function(e){void 0===e&&(e=!0),this.productionMode=e,this.titleIsHidden=!1,this.playerErrorInStartup=!1,this.mediaInfo=null,this.adIntegration=null,this.canSkipAdOrPromotional=!1,this.nextUpDispatched=!1,this.canSeekDispatched=!1,this.playerDestroyed=!1},we=function(){function e(){}return e.canChromecast=function(){return(D.isChrome()||D.isAndroid())&&!D.isEdge()},e.canAirplay=function(){return D.isSafari()||D.isIOS()},e}(),Se=function(){function e(e,t){var n=this;this.publisher=e,this.config=t,this.userPreferencesUrl=D.getSiteUrlReducedToFirstPathItem(),e.addSubscriber(T.internalPlayerEvents.reset,this.reset.bind(this)),this.updatePreferencesHandler=function(e){n.userPreferences[e.content.type]=e.content.value,n.saveUserPreferences()},e.addSubscriber(T.internalPlayerEvents.updateUserPreferences,this.updatePreferencesHandler),this.userPreferences=this.loadUserPreferencesForSite(this.userPreferencesUrl),this.userPreferences||(this.userPreferences={site:this.userPreferencesUrl,volume:1}),this.userPreferences}return e.prototype.loadUserPreferencesForSite=function(e){return this.loadUserPreferences().find((function(t){if(t.site===e)return t}))},e.prototype.loadUserPreferences=function(){if(!D.isLocalStorageAvailable())return[];var e=localStorage.getItem("vrtPlayerUserPreferences");if(!e)return[];try{return JSON.parse(e)}catch(e){return[]}},e.prototype.bindToPlayer=function(){var e=this;this.volumeChangeHandler=function(t){e.config.startMutedOverride||e.updatePreferencesHandler({name:null,code:null,content:{type:H.VOLUME,value:t.content.volume}})},this.publisher.addSubscriber(T.publicPlayerEvents.volumechange,O.debounce(this.volumeChangeHandler,500))},e.prototype.saveUserPreferences=function(){var e=this,t=this.loadUserPreferences(),n=t.findIndex((function(t){if(t.site===e.userPreferencesUrl)return t}));n>-1?t[n]=this.userPreferences:t.push(this.userPreferences),this.userPreferences,localStorage.setItem("vrtPlayerUserPreferences",JSON.stringify(t))},e.prototype.reset=function(){this.publisher.removeSubscriber(T.publicPlayerEvents.volumechange,this.volumeChangeHandler)},e.prototype.destroy=function(){this.publisher.removeSubscriber(T.internalPlayerEvents.updateUserPreferences,this.updatePreferencesHandler),this.updatePreferencesHandler=null},e}();!function(e){e.VOLUME="volume",e.SUBTITLES="subtitlesOn",e.QUALITY="quality"}(H||(H={}));var Te=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))},Oe=function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},ke=function(){function e(e,t){this.eventHandlers=[],this.updateTickTime=100,this.config=e,this.playlist=t,this.state=new Re(e.productionMode)}return e.prototype.preparePlayerForPlayback=function(e,t,n){return Te(this,void 0,void 0,(function(){var r;return Oe(this,(function(i){switch(i.label){case 0:return e.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.error,this.onPlayerError.bind(this,e)),e.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.warning,this.onPlayerWarning.bind(this)),e.addRemovableEventListener(this.eventHandlers,T.internalPlayerEvents.reset,this.onPlayerResetRequested.bind(this)),e.addRemovableEventListener(this.eventHandlers,T.internalPlayerEvents.destroy,this.onPlayerDestroyRequested.bind(this)),this.ilc=new Pe(t,e,n,this.setupAds(e,t)),this.ilc.pal.setAutoplay(this.config.autoplay),r=this.state,[4,n.mediaInfo];case 1:return r.mediaInfo=i.sent(),n.prepareSources(this.state.mediaInfo),this.analyticsWrapper=this.setupAnalytics(e,t),this.mapApiCalls(e,t,n.sourceService),[4,this.prepareSourceForPlayback()];case 2:return i.sent(),[4,this.markPlayerReadyForPlayback()];case 3:return i.sent(),[2]}}))}))},e.prototype.restorePlayback=function(e,t,n,r,i){var a=this;e.addOneTimeSubscriber(T.publicPlayerEvents.play,(function(){i&&(a.config.startMutedOverride?a.ilc.pal.setVolume(0):D.isMobile()?a.ilc.pal.setVolume(1):a.ilc.pal.setVolume(i.volume))})),setTimeout((function(){return Te(a,void 0,void 0,(function(){var t=this;return Oe(this,(function(i){switch(i.label){case 0:return this.state.mediaInfo.isLiveStream()&&(r=this.config.isLiveStartOver&&!0===this.config.isLiveStartOver?0:1/0),null!=r&&r>0&&e.addOneTimeSubscriber(T.publicPlayerEvents.timeupdate,(function(){t.ilc.pal.seek(r)})),n?[4,O.wait(150)]:[3,2];case 1:i.sent(),this.ilc.pal.play(),i.label=2;case 2:return[2]}}))}))}))},e.prototype.markPlayerReadyForPlayback=function(){return Te(this,void 0,void 0,(function(){return Oe(this,(function(e){return this.markPlayerReadyForPlaybackSpecific(),this.state.updateInterval=setInterval(this.updateTick.bind(this,this.ilc),this.updateTickTime),[2]}))}))},e.prototype.updateTick=function(){var e=this.ilc.pal.getDuration(),t=this.ilc.pal.playHeadPosition();if(this.playlist.hasNext()&&e>0&&Math.round(e-t)<=this.config.nextUpDelay&&!this.state.nextUpDispatched){if(!this.ilc.pal.isAdPlaying()){this.state.nextUpDispatched=!0;var n=15;this.state.mediaInfo.isLiveStream()||(n=this.ilc.pal.getDuration()-this.ilc.pal.playHeadPosition()),this.ilc.publisher.publish(T.internalPlayerEvents.nextupAnnounced,{remainingDuration:n})}}else this.state.nextUpDispatched&&(!this.playlist.hasNext()||Math.round(e-t)>this.config.nextUpDelay)&&(this.state.nextUpDispatched=!1,this.ilc.publisher.publish(T.publicPlayerEvents.nextupremoved));this.updateTickSpecific()},e.prototype.onPlayerError=function(e,t){return Te(this,void 0,void 0,(function(){return Oe(this,(function(n){return console.error(t),this.onPlayerErrorSpecific(e,t),t.code!==d.AGGREGATOR_ERROR_NOT_AUTHENTICATED&&t.code!==d.PLAYER_NETWORK_API_GENERAL&&b.errorToSentry("Player error",t),[2]}))}))},e.prototype.onPlayerWarning=function(e){console.warn("name: "+e.name+", code: "+e.code+", message: "+e.message),e.content&&(console.warn(e.content),b.errorToSentry("Player warning",e))},e.prototype.onPlayerResetRequested=function(e){var t=this;clearInterval(this.state.updateInterval),this.eventHandlers.forEach((function(e){t.ilc.publisher.removeSubscriber(e.event,e.handler)})),this.eventHandlers=[],this.onPlayerResetRequestedSpecific(),this.analyticsWrapper&&(this.analyticsWrapper.adobeAnalytics.destroy(),this.analyticsWrapper.adobeAnalytics=null,this.analyticsWrapper.cim.destroy(),this.analyticsWrapper.cim=null),setTimeout((function(){t.ilc.destroy(),t.ilc=null}),this.updateTickTime)},e.prototype.onPlayerDestroyRequested=function(e){clearInterval(this.state.updateInterval),this.ilc.pal.releasePlayerResources()},e.prototype.mapApiCalls=function(e,t,n){var r=this;e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.destroyApiCall,(function(){r.state.playerDestroyed||(t.onPlayerDestroyRequested(),r.state.playerDestroyed=!0)})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.muteApiCallSet,(function(n){n.content?(r.state.previousVolumeLevel=t.getVolume(),t.setVolume(0)):t.setVolume(r.state.previousVolumeLevel),e.publish(T.internalPlayerEvents.updateUserPreferences,{type:H.VOLUME,value:t.getVolume()})})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.muteApiCallGet,(function(){e.publish(T.apiCallEvents.muteApiCallGetReturn,0===t.getVolume())})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.volumeApiCallSet,(function(n){t.setVolume(n.content),e.publish(T.internalPlayerEvents.updateUserPreferences,{type:H.VOLUME,value:t.getVolume()})})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.volumeApiCallGet,(function(){e.publish(T.apiCallEvents.volumeApiCallGetReturn,t.getVolume())})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.durationApiCallGet,(function(){e.publish(T.apiCallEvents.durationApiCallGetReturn,t.getDuration())})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.currentTimeApiCallSet,(function(e){t.seek(e.content)})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.currentTimeApiCallGet,(function(){e.publish(T.apiCallEvents.currentTimeApiCallGetReturn,t.playHeadPosition())})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.currentDateTimeApiCallGet,(function(){e.publish(T.apiCallEvents.currentDateTimeApiCallGetReturn,t.playHeadDateTimePosition())})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.pausedApiCallGet,(function(){e.publish(T.apiCallEvents.pausedApiCallGetReturn,t.isPaused())})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.loopApiCallSet,(function(e){t.setLoop(e.content)})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.loopApiCallGet,(function(){e.publish(T.apiCallEvents.loopApiCallGetReturn,t.isLooping())})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.currentSrcApiCallGet,(function(){e.publish(T.apiCallEvents.currentSrcApiCallGetReturn,r.state.mediaInfo.currentSource.getSource().src)})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.currentMediaReferenceApiCallGet,(function(){e.publish(T.apiCallEvents.currentMediaReferenceApiCallGetReturn,r.state.mediaInfo.mediaReference)})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.srcApiCallSet,(function(t){Array.isArray(t.content)||t.content.constructor===String?e.publish(T.internalPlayerEvents.mediaReferenceChanged,{newMediaReferences:t.content,newDigitalDatas:null}):e.publish(T.internalPlayerEvents.mediaReferenceChanged,{newMediaReferences:t.content.newSources,newDigitalDatas:t.content.newDigitalDatas})})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.srcApiCallGet,(function(){e.publish(T.apiCallEvents.srcApiCallGetReturn,r.state.mediaInfo.currentSource.getSource().src)})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.seekableApiCallGet,(function(){e.publish(T.apiCallEvents.seekableApiCallGetReturn,t.getSeekableRanges())})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.hasPlayedApiCallGet,(function(){e.publish(T.apiCallEvents.hasPlayedApiCallGetReturn,t.hasPlayed())})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.controlsApiCallSet,(function(e){e.content?t.enableInterface():t.disableInterface()})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.controlsApiCallGet,(function(){e.publish(T.apiCallEvents.controlsApiCallGetReturn,t.isInterfaceEnabled())})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.playlistSizeApiCallGet,(function(){e.publish(T.apiCallEvents.playlistSizeApiCallGetReturn,r.playlist.length())})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.currentPlaylistItemApiCallGet,(function(){e.publish(T.apiCallEvents.currentPlaylistItemApiCallGetReturn,r.playlist.current())})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.activeSubtitlesApiCallGet,(function(){e.publish(T.apiCallEvents.activeSubtitlesApiCallGetReturn,t.getActiveSubs())})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.availableQualitiesApiCallGet,(function(){e.publish(T.apiCallEvents.availableQualitiesApiCallGetReturn,t.getAvailableQualities())})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.autoplayApiCallGet,(function(){e.publish(T.apiCallEvents.autoplayApiCallGetReturn,t.getAutoplay())})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.autoplayApiCallSet,(function(e){t.setAutoplay(e.content)})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.playApiCall,(function(){t.play()})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.pauseApiCall,(function(){t.isPaused()||t.pause()})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.togglePlayApiCall,(function(){t.isPaused()?t.play():t.pause()})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.skipAdApiCall,(function(){r.state.canSkipAdOrPromotional&&(t.isAdPlaying()?t.skipAd():r.state.canSkipAdOrPromotional&&r.state.mediaInfo.remainingPlaylistItemDuration>=0&&t.skipPromotional(r.state.mediaInfo.remainingPlaylistItemDuration))})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.toggleCastApiCall,(function(){t.isCasting()?we.canChromecast()?t.stopCast():we.canAirplay()&&t.stopAirplay():we.canChromecast()?t.startCast():we.canAirplay()&&t.startAirplay()})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.toggleMuteApiCall,(function(){if(0===t.getVolume()){var e=r.state.previousVolumeLevel;t.setVolume(e||1)}else{e=t.getVolume();r.state.previousVolumeLevel=isNaN(e)?1:e,t.setVolume(0)}})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.rewindSecondsApiCall,(function(e){if(r.state.canSeekDispatched){var n=r.state.mediaInfo.getRealSeekTime(0),i=t.playHeadPosition()-e.content;i=i<n?n:i,t.seek(i)}})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.fastSeekApiCall,(function(e){r.state.canSeekDispatched&&t.seek(r.state.mediaInfo.getRealSeekTime(e.content))})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.liveStartOverApiCall,(function(){e.publish(T.publicPlayerEvents.startover)})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.toggleSubtitlesApiCall,(function(){t.toggleSubs()})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.toggleFullscreenApiCall,(function(){t.toggleFullscreen()})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.disableInterfaceApiCall,(function(){t.disableInterface()})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.enableInterfaceApiCall,(function(){t.enableInterface()})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.throwErrorApiCall,(function(t){e.errorHandler.handleError(d.GENERIC_ERROR,t.content.message,t.content.content)})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.showTitleApiCall,(function(e){r.state.titleIsHidden=!e.content})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.nextApiCall,(function(){e.publish(T.publicPlayerEvents.nextsourcerequested)})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.previousApiCall,(function(){e.publish(T.publicPlayerEvents.previoussourcerequested)})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.gotoApiCall,(function(t){e.publish(T.internalPlayerEvents.playlistSourceRequested,{index:isNaN(t.content)?null:t.content,mediaReference:isNaN(t.content)?t.content:null})})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.addToPlaylistApiCall,(function(e){r.playlist.append(e.content.mediaReference,e.content.digitalData)})),e.addRemovableEventListener(this.eventHandlers,T.apiCallEvents.setQualityApiCall,(function(e){t.setQuality(e.content)}))},e}(),Ce=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ie=function(e){function t(t,n){return e.call(this,t,n)||this}return Ce(t,e),t.prototype.setupAds=function(e,t){return null},t.prototype.setupAnalytics=function(e,t){return{adobeAnalytics:new I(this.config.playerMode,t,this.state.mediaInfo,e),cim:new G(this.config.playerMode,this.config.containerElement,t,this.state.mediaInfo,e,this.config.cimId)}},t.prototype.prepareSourceForPlayback=function(){this.ilc.pal.setSource(this.state.mediaInfo)},t.prototype.markPlayerReadyForPlaybackSpecific=function(){this.ilc.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.startover,this.onStartOver.bind(this))},t.prototype.updateTickSpecific=function(){},t.prototype.onPlayerErrorSpecific=function(e,t){},t.prototype.onPlayerResetRequestedSpecific=function(){},t.prototype.onStartOver=function(e){this.ilc.pal.seek(0)},t}(ke),_e=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Le=function(e){function t(t,n){var r=e.call(this,t)||this;return r.sampleRate=n,r}return _e(t,e),t}(y),Ne=function(){function e(){}return e.stringToSeconds=function(e){if(e&&e.length>0){var t=e.split(":");t.reverse();var n=parseInt(t[0],10);return t.length>1&&(n+=60*parseInt(t[1],10)),t.length>2&&(n+=3600*parseInt(t[2],10)),n}return NaN},e}(),De=function(){function e(){}return e.registerTooltip=function(e,t){void 0===t&&(t=document.body);var n=window;D.isMobileOrTablet()||n.tippy&&n.tippy(e,{content:e.getAttribute("aria-label"),interactive:!0,duration:[500,0],animation:"fade",arrow:!0,appendTo:t.children[0],flipOnUpdate:!0,popperOptions:{strategy:"fixed",modifiers:[{name:"preventOverflow",options:{altAxis:!1,tether:!1}}]},onShow:function(){D.isIOS()&&e.click()}})},e.registerTooltips=function(e,t){void 0===t&&(t=document.body);for(var n=0,r=e;n<r.length;n++){var i=r[n];i&&this.registerTooltip(i,t)}},e.updateAriaAndTooltip=function(e,t){e&&e._tippy&&(e.setAttribute("aria-label",t),e._tippy.setContent(t))},e.enableTooltipHideOnESCPress=function(e){var t=this;e&&(e.onkeydown=function(e){"Escape"===e.key&&t.hideAllTooltips()})},e.adjustAllSvgElementsForAccessibility=function(e){for(var t=0,n=Array.from(e.getElementsByTagName("svg"));t<n.length;t++){var r=n[t];r.setAttribute("role","presentation"),r.setAttribute("focusable","false")}},e.enableTimeEntryOnFocus=function(e,t,n){void 0===n&&(n="Enter"),e.onfocus=function(r){var i="";e.onkeypress=function(r){r.key===n?(e.onblur=null,e.onkeydown=null,t(Ne.stringToSeconds(i)),i=""):r.key.search(/([0-9]|:)+/g)>=0&&(i+=r.key)}},e.onblur=function(t){e.onkeydown=null}},e.hideAllTooltips=function(){window.tippy.hideAll()},e}(),xe=function(){function e(){}return e.setVisible=function(t,n,r){void 0===r&&(r="visibility");var i=e.getStyleValues(r);t&&(n?t.style.setProperty(i.property,i.visibleStyle,"important"):t.style.setProperty(i.property,i.invisibleStyle,"important"))},e.toggleVisible=function(t,n){void 0===n&&(n="visibility");var r=e.getStyleValues(n);t&&(t.style.getPropertyValue(r.property)===r.visibleStyle?t.style.setProperty(r.property,r.invisibleStyle,"important"):t.style.setProperty(r.property,r.visibleStyle,"important"))},e.isVisible=function(t,n){void 0===n&&(n="visibility");var r=e.getStyleValues(n);return!!t&&t.style.getPropertyValue(r.property)===r.visibleStyle},e.insertBefore=function(e,t){return e&&t?(t.parentElement.insertBefore(e,t),e):null},e.setOrderOnElements=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=0,i=t;r<i.length;r++){var a=i[r];a&&(a.style.order=""+e++)}},e.setTabIndexOnElements=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=0,r=e;n<r.length;n++){var i=r[n];i&&(i.tabIndex=0)}},e.getStyleValues=function(e){var t,n,r;switch(e){case"visibility":t="visibility",n="visible",r="hidden";break;case"display-block":t="display",n="block",r="none";break;case"display-inline":t="display",n="inline-block",r="none"}return{property:t,visibleStyle:n,invisibleStyle:r}},e.swapButtonImages=function(e,t){if(e&&2===e.children.length){var n=e.children.item(0),r=e.children.item(1);t?(n.style.display="block",r.style.display="none"):(n.style.display="none",r.style.display="block")}},e}(),Ge=function(){function e(e){this.playerElement=e,this.skinElements=[]}return e.prototype.addElementToCheck=function(e,t){this.skinElements.push({name:e,selector:t,element:this.playerElement.querySelector(t)})},e.prototype.allElementsExist=function(){for(var e=!0,t=0,n=this.skinElements;t<n.length;t++){var r=n[t];r.element||(r.name,r.selector,e=!1)}return e},e}(),Me=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ve=function(e){function t(t){return e.call(this,t)||this}return Me(t,e),t.prototype.validate=function(){return this.addElementToCheck("Override Styles","#override-styles-controls"),this.addElementToCheck("Ad-title",".player-controls-container .player-controls-ad-title"),this.addElementToCheck("Ad-duration",".player-controls-container .player-controls-ad-duration"),this.addElementToCheck("Live-clock",".player-controls-container .player-controls-live-clock"),this.addElementToCheck("Ad-timer",".player-controls-container .player-controls-ad-timer"),this.addElementToCheck("Rewind",".player-controls-container .player-controls-goback"),this.addElementToCheck("Startover",".player-controls-container .player-controls-startover"),this.addElementToCheck("Play-pause",".player-controls-container .player-controls-play-pause"),this.addElementToCheck("Mute-unmute",".player-controls-container .player-controls-mute"),this.addElementToCheck("Subtitles",".player-controls-container .player-controls-subtitles"),this.allElementsExist()},t}(Ge),He=function(){function e(e,t,n){this.playerElement=e,this.playerColor=t,this.player=n,this.fadeinClass="player-general-fadein",this.fadeoutClass="player-general-fadeout"}return e.prototype.uiShouldShow=function(){return!!this.player.paused||this.playerElement.classList.contains("vjs-user-active")},e.prototype.swapActiveStates=function(e,t){t?(e.classList.remove(this.fadeoutClass),e.classList.add(this.fadeinClass)):(e.classList.remove(this.fadeinClass),e.classList.add(this.fadeoutClass))},e}(),Ue=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Fe=function(e){function t(t,n,r){var i=e.call(this,t,r.color,n)||this;return i.uiConfig=r,i.controlBar=t.querySelector(".theo-secondary-color.vjs-control-bar"),i.playPause=t.querySelector(".vjs-play-control.vjs-control.vjs-button"),i.adTitle=t.querySelector(".player-controls-container .player-controls-ad-title"),i.adDuration=t.querySelector(".player-controls-container .player-controls-ad-duration"),i.liveClock=t.querySelector(".player-controls-container .player-controls-live-clock"),i.countdown=t.querySelector(".player-controls-container .player-controls-ad-timer"),i.rewind10=t.querySelector(".player-controls-container .player-controls-goback"),i.forward10=t.querySelector(".player-controls-container .player-controls-forward"),i.mute=t.querySelector(".vjs-mute-control.vjs-control.vjs-button"),i.volume=t.querySelector(".vjs-volume-control.vjs-control"),i.volumeSeeker=t.querySelector(".vjs-volume-bar.vjs-slider-bar.vjs-slider.vjs-slider-horizontal"),i.currentTime=t.querySelector(".vjs-current-time.vjs-time-control.vjs-control"),i.dividerTime=t.querySelector(".vjs-time-control.vjs-time-divider"),i.totalTime=t.querySelector(".vjs-duration.vjs-time-control.vjs-control"),i.seeker=t.querySelector(".vjs-progress-holder.vjs-slider.vjs-slider-horizontal"),i.settings=t.querySelector(".vjs-icon-cog.theo-settings-control-button.theo-controlbar-button.vjs-menu-button.vjs-menu-button-popup.vjs-control.vjs-button"),i.qualityContainer=t.querySelector(".player-controls-container .player-controls-quality-selector"),i.qualityList=t.querySelector(".player-controls-container .player-controls-quality-list"),i.qualityListItems=[],i.startover=t.querySelector(".player-controls-container .player-controls-startover"),i.subtitles=t.querySelector(".vjs-icon-subtitles.theo-text-track-control-button.theo-controlbar-button.vjs-menu-button.vjs-menu-button-popup.vjs-control.vjs-button"),i.fullscreen=t.querySelector(".vjs-fullscreen-control.vjs-control.vjs-button"),i.validator=new Ve(t),i}return Ue(t,e),t.waitForTheoPlayerReady=function(e){return new Promise((function(t,n){var r=setInterval((function(){e.getElementsByClassName("theo-secondary-color vjs-control-bar").length>0&&(clearInterval(r),t())}),33)}))},t.prototype.validate=function(){return this.validator.validate()},t.prototype.enable=function(){this.modifyControls(),this.uiConfig.disableFfAndRwControls&&(xe.setVisible(this.rewind10,!1,"display-inline"),xe.setVisible(this.forward10,!1,"display-inline")),this.uiConfig.disableVolumeControls&&(xe.setVisible(this.volume,!1,"visibility"),xe.setVisible(this.mute,!1,"visibility")),this.uiConfig.disableFullScreenControl&&xe.setVisible(this.fullscreen,!1,"visibility")},t.prototype.modifyControls=function(){var e=this;this.playerElement.querySelector(".theoplayer-texttracks").setAttribute("aria-live","off"),this.playPause=xe.insertBefore(this.playerElement.querySelector(".player-controls-container .player-controls-play-pause"),this.playPause),xe.insertBefore(this.rewind10,this.currentTime),xe.insertBefore(this.forward10,this.currentTime),xe.setVisible(this.countdown,!1,"display-block"),xe.insertBefore(this.countdown,this.rewind10),xe.insertBefore(this.liveClock,this.currentTime),this.mute=xe.insertBefore(this.playerElement.querySelector(".player-controls-container .player-controls-mute"),this.mute),xe.insertBefore(this.startover,this.subtitles),this.subtitles=xe.insertBefore(this.playerElement.querySelector(".player-controls-container .player-controls-subtitles"),this.subtitles),xe.swapButtonImages(this.subtitles,!0),this.constructCustomFullscreenButton(),this.settings=xe.insertBefore(this.playerElement.querySelector(".player-controls-container .player-controls-quality"),this.settings),xe.insertBefore(this.qualityContainer,this.settings),this.settings.onclick=function(){xe.setVisible(e.qualityContainer,!xe.isVisible(e.qualityContainer,"display-block"),"display-block")},xe.setOrderOnElements(-100,this.playPause,this.countdown,this.rewind10,this.forward10,this.liveClock,this.currentTime,this.dividerTime,this.totalTime,this.mute,this.volume),xe.setTabIndexOnElements(this.playerElement,this.seeker,this.playPause,this.rewind10,this.forward10,this.mute,this.volumeSeeker,this.startover,this.subtitles,this.fullscreen,this.settings);var t=this.playerElement.querySelector(".player-controls-container"),n=t.querySelector("#override-styles-controls");this.playerElement.appendChild(n),t.remove(),this.playerElement.classList.add(this.playerColor.styleName),this.playerElement.setAttribute("aria-label","VRT Video player"),this.seeker.setAttribute("aria-label",c.getValue("tooltip-seek-bar",this.uiConfig.uiLanguage)),this.volumeSeeker.setAttribute("aria-label",c.getValue("tooltip-adjust-volume",this.uiConfig.uiLanguage)),c.translateAllElements(this.playerElement,this.uiConfig.uiLanguage),De.registerTooltips([this.playPause,this.rewind10,this.forward10,this.mute,this.volumeSeeker,this.startover,this.subtitles,this.fullscreen,this.settings],this.playerElement),De.enableTooltipHideOnESCPress(document.body)},t.prototype.subscribeForInternalPlayerEvents=function(e){var t=this;e.addSubscriber(T.internalPlayerEvents.updateTitle,(function(e){t.updateGeneralState(e.content.newTitle)})),e.addSubscriber(T.internalPlayerEvents.updateTick,(function(e){t.checkActive(),t.updateStartOverSupport(e.content.enableStartOver)})),e.addSubscriber(T.internalPlayerEvents.adIsPlayingTick,(function(e){t.activatePromotionalPlayingState(e.content.promotionalTitle),t.updatePromotionalState(e.content.remainingDuration)})),e.addSubscriber(T.internalPlayerEvents.promotionalIsPlayingTick,(function(e){t.activatePromotionalPlayingState(e.content.promotionalTitle),t.updatePromotionalState(e.content.remainingDuration)})),e.addSubscriber(T.internalPlayerEvents.onboardingIsPlayingTick,(function(e){t.activatePromotionalPlayingState("",!0),t.updatePromotionalState(e.content.remainingDuration)})),e.addSubscriber(T.internalPlayerEvents.trailerIsPlayingTick,(function(e){e.content.hasPlayed&&(t.activatePromotionalPlayingState(e.content.promotionalTitle),t.updatePromotionalState(e.content.remainingDuration))})),e.addSubscriber(T.internalPlayerEvents.normalContentIsPlayingTick,(function(e){t.activateNonPromotionalPlayingState(e.content.isLive),t.updateSubtitlesAvailable(),!e.content.isPaused&&e.content.isLive&&t.updateLiveClock(e.content.playHeadPosition)})),e.addSubscriber(T.internalPlayerEvents.play,(function(e){t.updateSubtitlesAvailable(),t.activatePlayState(e.content.currentVolume)})),e.addSubscriber(T.publicPlayerEvents.pause,(function(e){t.activatePausedState()})),e.addSubscriber(T.publicPlayerEvents.volumechange,(function(e){t.onVolumeChange(e.content.volume)})),e.addSubscriber(T.publicPlayerEvents.fullscreenenter,(function(e){t.updateFullscreenIndicator()})),e.addSubscriber(T.publicPlayerEvents.fullscreenexit,(function(e){t.updateFullscreenIndicator()}))},t.prototype.checkActive=function(){this.uiShouldShow()||(De.hideAllTooltips(),xe.isVisible(this.qualityContainer,"display-block")&&xe.setVisible(this.qualityContainer,!1,"display-block"))},t.prototype.enabledTimeEntryOnSeeker=function(e){De.enableTimeEntryOnFocus(this.seeker,e)},t.prototype.activatePlayState=function(e){xe.swapButtonImages(this.playPause,!1),xe.swapButtonImages(this.mute,0!==e),De.updateAriaAndTooltip(this.playPause,c.getValue("tooltip-pause",this.uiConfig.uiLanguage))},t.prototype.activatePausedState=function(){xe.swapButtonImages(this.playPause,!0),De.updateAriaAndTooltip(this.playPause,c.getValue("tooltip-play",this.uiConfig.uiLanguage))},t.prototype.onVolumeChange=function(e){0===e?(xe.swapButtonImages(this.mute,!1),De.updateAriaAndTooltip(this.mute,c.getValue("tooltip-unmute",this.uiConfig.uiLanguage))):(xe.swapButtonImages(this.mute,!0),De.updateAriaAndTooltip(this.mute,c.getValue("tooltip-mute",this.uiConfig.uiLanguage)))},t.prototype.activatePromotionalPlayingState=function(e,t){void 0===t&&(t=!1),this.adTitle.textContent=e,xe.setVisible(this.seeker,!1),xe.setVisible(this.rewind10,!1,"display-inline"),xe.setVisible(this.forward10,!1,"display-inline"),xe.setVisible(this.liveClock,!1,"display-block"),xe.setVisible(this.currentTime,!1,"display-block"),xe.setVisible(this.dividerTime,!1,"display-block"),xe.setVisible(this.totalTime,!1,"display-block"),xe.setVisible(this.startover,!1,"display-block"),xe.setVisible(this.subtitles,!1,"display-block"),t?xe.setVisible(this.controlBar,!1):xe.setVisible(this.controlBar,!0)},t.prototype.updatePromotionalState=function(e){var t;xe.setVisible(this.countdown,!0,"display-block"),isNaN(e)?t="--":(t=e+" ",e<10&&e>0&&(t="0"+e)),this.adDuration.textContent=t},t.prototype.activateNonPromotionalPlayingState=function(e){xe.setVisible(this.controlBar,!0),xe.setVisible(this.seeker,!0),xe.setVisible(this.countdown,!1,"display-block"),e?this.activateLiveStreamState():this.activateVODState()},t.prototype.activateLiveStreamState=function(){this.currentTime.style.position="absolute",this.currentTime.style.left="-999em",this.dividerTime.style.position="absolute",this.dividerTime.style.left="-999em",this.totalTime.style.position="absolute",this.totalTime.style.left="-999em",xe.setVisible(this.rewind10,!1,"display-inline"),xe.setVisible(this.forward10,!1,"display-inline"),xe.setVisible(this.currentTime,!1,"display-block"),xe.setVisible(this.dividerTime,!1,"display-block"),xe.setVisible(this.totalTime,!1,"display-block"),xe.setVisible(this.liveClock,!0,"display-block")},t.prototype.activateVODState=function(){this.currentTime.style.position="unset",this.currentTime.style.left="unset",this.dividerTime.style.position="unset",this.dividerTime.style.left="unset",this.totalTime.style.position="unset",this.totalTime.style.left="unset",xe.setVisible(this.rewind10,!this.uiConfig.disableFfAndRwControls,"display-inline"),xe.setVisible(this.forward10,!this.uiConfig.disableFfAndRwControls,"display-inline"),xe.setVisible(this.currentTime,!0,"display-block"),xe.setVisible(this.dividerTime,!0,"display-block"),xe.setVisible(this.totalTime,!0,"display-block"),xe.setVisible(this.liveClock,!1,"display-block"),xe.setVisible(this.startover,!1,"display-block")},t.prototype.updateLiveClock=function(e){if(e){var t=e.toTimeString().slice(0,8);t&&"Invalid"===t.trim()&&(t="00:00:00"),this.liveClock.textContent=t}},t.prototype.playHeadAtLivePoint=function(){return"rgb(255, 0, 0)"===getComputedStyle(this.playerElement.querySelector(".theo-live-control-indicator"),"::before").color},t.prototype.updateSubtitlesAvailable=function(){for(var e=0,t=this.player.textTracks;e<t.length;e++){var n=t[e];if("subtitles"===n.kind||"captions"===n.kind)return void xe.setVisible(this.subtitles,!0,"display-block")}xe.setVisible(this.subtitles,!1,"display-block")},t.prototype.toggleSubtitles=function(e){e?(this.playerElement.querySelector(".theoplayer-texttracks").setAttribute("aria-live","assertive"),De.updateAriaAndTooltip(this.subtitles,c.getValue("tooltip-disable-subtitles",this.uiConfig.uiLanguage)),xe.swapButtonImages(this.subtitles,!1)):(this.playerElement.querySelector(".theoplayer-texttracks").setAttribute("aria-live","off"),De.updateAriaAndTooltip(this.subtitles,c.getValue("tooltip-enable-subtitles",this.uiConfig.uiLanguage)),xe.swapButtonImages(this.subtitles,!0))},t.prototype.togglePresentationMode=function(){var e=this.player.presentation;"inline"===e.currentMode||"picture-in-picture"===e.currentMode?e.requestMode("fullscreen"):e.requestMode("inline")},t.prototype.updateFullscreenIndicator=function(){var e=this.player.presentation;"inline"===e.currentMode||"picture-in-picture"===e.currentMode?(xe.swapButtonImages(this.fullscreen,!0),De.updateAriaAndTooltip(this.fullscreen,c.getValue("tooltip-fullscreen",this.uiConfig.uiLanguage))):(xe.swapButtonImages(this.fullscreen,!1),De.updateAriaAndTooltip(this.fullscreen,c.getValue("tooltip-fullscreen-exit",this.uiConfig.uiLanguage)))},t.prototype.updateStartOverSupport=function(e){xe.setVisible(this.startover,e,"display-block")},t.prototype.updateGeneralState=function(e){this.playerElement.setAttribute("aria-label",c.getValue("vrt-video-info",this.uiConfig.uiLanguage)+" "+e)},t.prototype.isInterfaceEnabled=function(){for(var e=!1,t=0,n=this.playerElement.querySelectorAll(".theo-secondary-color.vjs-control-bar");t<n.length;t++){"none"!==n[t].style.display&&(e=!0)}return e},t.prototype.disableInterface=function(){for(var e=0,t=this.playerElement.querySelectorAll(".theo-secondary-color.vjs-control-bar");e<t.length;e++){t[e].style.display="none"}},t.prototype.enableInterface=function(){for(var e=0,t=this.playerElement.querySelectorAll(".theo-secondary-color.vjs-control-bar");e<t.length;e++){t[e].style.display="flex"}},t.prototype.updateQualityListItems=function(e,t,n,r){var i=this;t.length>0&&(xe.isVisible(this.settings)||xe.setVisible(this.settings,!0,"display-block"),this.qualityList.innerHTML="",this.qualityListItems.forEach((function(e){e.onclick=null})),this.qualityListItems=[],t.reverse(),t.push(null),t.forEach((function(t){var a=i.createQualityItem(e,t,n,r);i.qualityListItems.push(a),i.qualityList.appendChild(a)})))},t.prototype.createQualityItem=function(e,t,n,r){var i=this,a=document.createElement("li");a.classList.add("player-controls-quality-list-item"),(!r&&n&&t&&t.bandwidth===n.bandwidth||r&&null===t)&&a.classList.add("player-controls-quality-list-item-active");var o=t&&t.height?t.height+"p":"auto",l=(t&&t.bandwidth?t.bandwidth/8*3600/1024/1024/1024:n.bandwidth/8*3600/1024/1024/1024).toFixed(2)+" "+c.getValue("gibibits-per-hour",this.uiConfig.uiLanguage);return a.innerHTML='<p class="player-controls-quality-list-item-text-title">'+o+'</p><p class="player-controls-quality-list-item-text">'+l+"</p>",a.onclick=function(){i.qualityListItems.filter((function(e){return e!==a})).forEach((function(e){e.classList.remove("player-controls-quality-list-item-active")})),a.classList.add("player-controls-quality-list-item-active"),e.publish(T.apiCallEvents.setQualityApiCall,t)},a},t.prototype.constructCustomFullscreenButton=function(){for(this.originalFullscreenButton=this.fullscreen;this.originalFullscreenButton.firstChild;)this.originalFullscreenButton.removeChild(this.originalFullscreenButton.firstChild);for(this.fullscreen=this.playerElement.querySelector(".player-controls-container .player-controls-fullscreen");this.fullscreen.childNodes.length>0;)this.originalFullscreenButton.appendChild(this.fullscreen.childNodes[0]);this.originalFullscreenButton.className="",this.originalFullscreenButton.className=this.fullscreen.className,this.originalFullscreenButton.setAttribute("aria-label",this.fullscreen.getAttribute("aria-label")),this.originalFullscreenButton.setAttribute("aria-translation-key",this.fullscreen.getAttribute("aria-translation-key")),this.fullscreen.parentElement.removeChild(this.fullscreen),this.fullscreen=this.originalFullscreenButton,this.originalFullscreenButton=null,xe.swapButtonImages(this.fullscreen,!0)},t}(He),je=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),qe=function(e){function t(t){return e.call(this,t)||this}return je(t,e),t.prototype.validate=function(){return this.addElementToCheck("Override Styles","#override-styles-overlay"),this.addElementToCheck("Title",".player-overlay-title"),this.addElementToCheck("Play",".player-overlay-btn-play"),this.addElementToCheck("Pulse",".player-overlay-pulse"),this.addElementToCheck("Pulse-play",".player-overlay-pulse-play"),this.addElementToCheck("Pulse-pause",".player-overlay-pulse-pause"),this.addElementToCheck("Cast",".player-overlay-cast"),this.addElementToCheck("Airplay",".player-overlay-airplay"),this.addElementToCheck("Skip",".player-overlay-skip"),this.addElementToCheck("Up-Next",".player-up-next-container"),this.addElementToCheck("Error",".player-overlay-error-overlay"),this.addElementToCheck("Error-title",".player-overlay-error-title"),this.addElementToCheck("Error-body",".player-overlay-error-body"),this.allElementsExist()},t}(Ge),Be=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ye=function(e){function t(t,n,r,i){var a=e.call(this,t,r.color,n)||this;return a.upNextAnimationState={isPaused:!1},a.uiConfig=r,a.overlay=t.querySelector(".player-overlay"),a.title=t.querySelector(".player-overlay-title"),a.play=t.querySelector(".player-overlay-btn-play"),a.pulse=t.querySelector(".player-overlay-pulse"),a.playPulseLogo=t.querySelector(".player-overlay-pulse-play"),a.pausePulseLogo=t.querySelector(".player-overlay-pulse-pause"),a.cast=t.querySelector(".player-overlay-cast"),a.airplay=t.querySelector(".player-overlay-airplay"),a.castOnText=t.querySelector(".theo-chromecast-status-info"),a.skip=t.querySelector(".player-overlay-skip"),a.mobilePlayPauseToggle=t.querySelector(".player-overlay-btn-mobile-play-toggle"),a.upNextBanner=t.querySelector(".player-up-next-button"),a.upNextBannerAnimation=t.querySelector(".player-up-next-btn-next"),a.upNextCard=t.querySelector(".player-up-next-card"),a.upNextCardAnimation=t.querySelector(".player-up-next-card-btn-bg"),a.errorOverlay=t.querySelector(".player-overlay-error-overlay"),a.errorTitle=t.querySelector(".player-overlay-error-title"),a.errorMessage=t.querySelector(".player-overlay-error-body"),a.validator=new qe(t),a.upNextDelay=i,a.upNextOverlayOverride=!1,a.upNextTypeIsCard=!1,a.hasPlayed=!1,a}return Be(t,e),t.prototype.validate=function(){return this.validator.validate()},t.prototype.enable=function(){this.modifyControls()},t.prototype.modifyControls=function(){var e=this;xe.setVisible(this.pausePulseLogo,!1,"display-block"),xe.setVisible(this.playPulseLogo,!1,"display-block"),xe.setVisible(this.errorOverlay,!1,"display-block"),xe.setVisible(this.upNextBanner,!1,"display-block"),xe.setVisible(this.upNextCard,!1,"display-inline"),xe.setVisible(this.mobilePlayPauseToggle,!1,"display-block");var t=this.play.children.item(0);t&&t.querySelector("path")&&"important"!==t.querySelector("path").style.getPropertyPriority("fill")&&(this.play.children.item(0).querySelector("path").style.fill=this.playerColor.value),D.isSafari()||D.isIOS()?(xe.setTabIndexOnElements(this.airplay),this.airplay.setAttribute("aria-label",c.getValue("tooltip-not-airplaying",this.uiConfig.uiLanguage)),De.registerTooltip(this.airplay,this.playerElement),this.castOnText.textContent=c.getValue("tooltip-being-casted",this.uiConfig.uiLanguage)):D.isChrome()&&(xe.setTabIndexOnElements(this.cast),this.cast.setAttribute("aria-label",c.getValue("tooltip-not-casting",this.uiConfig.uiLanguage)),De.registerTooltip(this.cast,this.playerElement),this.castOnText.textContent=c.getValue("tooltip-being-casted",this.uiConfig.uiLanguage));window.addEventListener("resize",(function(){var t=e.playerElement.querySelector("#player-up-next-poster-image");if(t){var n=e.playerElement.offsetWidth;n<=770?(t.style.width="200px",t.style.height="150px"):n>770?(t.style.width="375px",t.style.height="250px"):(t.style.width="200px",t.style.height="150px")}}))},t.prototype.subscribeForInternalPlayerEvents=function(e){var t=this;e.addSubscriber(T.internalPlayerEvents.ready,(function(){t.activateReadyState()})),e.addSubscriber(T.internalPlayerEvents.updateTitle,(function(e){t.showTitle(!e.content.isHidden,e.content.newTitle)})),e.addSubscriber(T.internalPlayerEvents.updateTick,(function(e){t.checkActive()})),e.addSubscriber(T.internalPlayerEvents.showError,(function(e){t.showError(e.content.name,e.content.message)})),e.addSubscriber(T.internalPlayerEvents.adIsPlayingTick,(function(e){t.deactivateCastOption(),t.updateSkipState(e.content.canSkip,e.content.adIntegration)})),e.addSubscriber(T.internalPlayerEvents.promotionalIsPlayingTick,(function(e){t.activateCastOption(),t.updateSkipState(e.content.canSkip)})),e.addSubscriber(T.internalPlayerEvents.trailerIsPlayingTick,(function(e){t.activateCastOption(),e.content.hasPlayed&&t.updateSkipState(e.content.canSkip)})),e.addSubscriber(T.internalPlayerEvents.normalContentIsPlayingTick,(function(e){t.activateCastOption(),t.updateSkipState(!1)})),e.addSubscriber(T.internalPlayerEvents.play,(function(e){t.activatePlayState(),t.showPulse(!0),t.upNextAnimationState.isPaused=!1,t.hasPlayed=!0})),e.addSubscriber(T.publicPlayerEvents.pause,(function(e){t.activatePauseState(),t.showPulse(!1),t.upNextAnimationState.isPaused=!0})),e.addSubscriber(T.publicPlayerEvents.seeked,(function(e){t.upNextOverlayOverride&&(clearInterval(t.upNextCardCurrentAnimation),clearInterval(t.upNextBannerCurrentAnimation),t.upNextTypeIsCard?t.createUpNextCardAnimation(t.playerElement.querySelector("#player-up-next-card-btn-bg"),"stroke-dashoffset",e.content.duration-e.content.position,!0):t.createUpNextBannerAnimation(t.playerElement.querySelector(".player-up-next-btn-next"),Math.abs(e.content.duration-e.content.position-t.upNextDelay),!0))})),e.addSubscriber(T.publicPlayerEvents.castingstarted,(function(e){t.activateCastState()})),e.addSubscriber(T.publicPlayerEvents.castingstopped,(function(e){t.deactivateCastState()})),e.addSubscriber(T.publicPlayerEvents.nextupannounced,(function(e){t.updateUpNextState(!0,e.content.remainingDuration,e.content.mediaInfo),t.upNextOverlayOverride=!0})),e.addSubscriber(T.publicPlayerEvents.nextupremoved,(function(e){t.updateUpNextState(!1),t.upNextOverlayOverride=!1})),e.addSubscriber(T.internalPlayerEvents.reset,(function(e){t.hideError()}))},t.prototype.checkActive=function(){var e=this.uiShouldShow();this.swapActiveStates(this.overlay,e||this.upNextOverlayOverride),e&&this.hasPlayed&&D.isMobileOrTablet()?xe.setVisible(this.mobilePlayPauseToggle,!0,"display-block"):"0"===window.getComputedStyle(this.overlay).opacity&&xe.setVisible(this.mobilePlayPauseToggle,!1,"display-block")},t.prototype.activateReadyState=function(){xe.setVisible(this.play,!0,"display-block")},t.prototype.activatePlayState=function(){xe.setVisible(this.play,!1,"display-block"),xe.swapButtonImages(this.mobilePlayPauseToggle,!1)},t.prototype.activatePauseState=function(){xe.swapButtonImages(this.mobilePlayPauseToggle,!0)},t.prototype.activateCastOption=function(){var e;D.isIEorEdge()||D.isFireFox()||(we.canAirplay()?xe.setVisible(this.airplay,!0,"display-block"):we.canChromecast()&&(null===(e=window.cast)||void 0===e?void 0:e.framework)&&xe.setVisible(this.cast,!0,"display-block"))},t.prototype.deactivateCastOption=function(){we.canAirplay()?xe.setVisible(this.airplay,!1,"display-block"):we.canChromecast()&&xe.setVisible(this.cast,!1,"display-block")},t.prototype.showTitle=function(e,t){t&&(this.title.textContent=t),xe.setVisible(this.title,e,"display-block")},t.prototype.showPulse=function(e){D.isMobileOrTablet()||(this.pulse.classList.remove("player-overlay-pulsed"),this.pulse.offsetWidth,e?(xe.setVisible(this.playPulseLogo,!0,"display-block"),xe.setVisible(this.pausePulseLogo,!1,"display-block")):(xe.setVisible(this.playPulseLogo,!1,"display-block"),xe.setVisible(this.pausePulseLogo,!0,"display-block")),this.pulse.classList.add("player-overlay-pulsed"))},t.prototype.activateCastState=function(){we.canAirplay()?this.cast.setAttribute("aria-label",c.getValue("tooltip-airplaying",this.uiConfig.uiLanguage)):we.canChromecast()&&this.cast.setAttribute("aria-label",c.getValue("tooltip-casting",this.uiConfig.uiLanguage))},t.prototype.deactivateCastState=function(){we.canAirplay()?this.cast.setAttribute("aria-label",c.getValue("tooltip-not-airplaying",this.uiConfig.uiLanguage)):we.canChromecast()&&this.cast.setAttribute("aria-label",c.getValue("tooltip-not-casting",this.uiConfig.uiLanguage))},t.prototype.updateSkipState=function(e,t){e&&"google-ima"!==t?xe.setVisible(this.skip,!0,"display-block"):xe.setVisible(this.skip,!1,"display-block")},t.prototype.updateUpNextState=function(e,t,n){if(e&&!this.uiConfig.disableUpNextUi)if(n.posterImageUrl){xe.setVisible(this.upNextCard,!0,"display-inline");var r=this.upNextCard.querySelector("#player-up-next-poster-image");r.setAttribute("src",n.posterImageUrl),r.setAttribute("alt",n.title),this.upNextTypeIsCard=!0,this.createUpNextCardAnimation(this.playerElement.querySelector("#player-up-next-card-btn-bg"),"stroke-dashoffset",t)}else xe.setVisible(this.upNextBanner,!0,"display-block"),this.upNextTypeIsCard=!1,this.createUpNextBannerAnimation(this.playerElement.querySelector(".player-up-next-btn-next"),Math.abs(t-this.upNextDelay));else xe.setVisible(this.upNextBanner,!1,"display-block"),xe.setVisible(this.upNextCard,!1,"display-block"),clearInterval(this.upNextCardCurrentAnimation),clearInterval(this.upNextBannerCurrentAnimation)},t.prototype.showError=function(e,t){xe.setVisible(this.errorOverlay,!0,"display-block"),this.errorTitle.innerText=e,this.errorMessage.innerText=t},t.prototype.hideError=function(){xe.setVisible(this.errorOverlay,!1,"display-block"),this.errorTitle.innerText="",this.errorMessage.innerText=""},t.prototype.isInterfaceEnabled=function(){return"none"!==this.playerElement.querySelector(".player-overlay").style.display},t.prototype.disableInterface=function(){this.playerElement.querySelector(".player-overlay").style.display="none"},t.prototype.enableInterface=function(){this.playerElement.querySelector(".player-overlay").style.display="block"},t.prototype.createUpNextCardAnimation=function(e,t,n,r){var i=this;void 0===r&&(r=!1);var a=-145,o=145/(30*this.upNextDelay),l=o*n*30-Math.abs(a),s=setInterval((function(){i.upNextAnimationState.isPaused&&!r||(r=!1,l>a?(l=(l-=o)<a?a:l>0?0:l,e.style.setProperty(t,l+"","important")):clearInterval(s))}),1e3/30);this.upNextCardCurrentAnimation=s},t.prototype.createUpNextBannerAnimation=function(e,t,n){var r=this;void 0===n&&(n=!1);var i=100/(30*this.upNextDelay),a=30*t*i,o=setInterval((function(){r.upNextAnimationState.isPaused&&!n||(n=!1,a<100?(a=(a+=i)>100?100:a,e.style.setProperty("background-position",a+"% bottom","important")):clearInterval(o))}),1e3/30);this.upNextBannerCurrentAnimation=o},t}(He),Qe=function(e,t){var n=this;this.player=e,this.publisher=t,this.bindAbstractedPlayerEvents(),window.onbeforeunload=function(){n.publisher.publish(T.publicPlayerEvents.exiting)}},ze=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ke=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))},We=function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},Je=function(e){function t(t,n){var r=this,i=window.THEOplayer.Player(t.containerElement,h.getTheoConfig(t));return(r=e.call(this,i,n)||this).config=t,r.playerElement=i.element.parentElement.parentElement,D.fixIE(r.playerElement),i.abr.strategy={type:t.abrStrategy},i.abr.targetBuffer=30,i.preload=t.preloadMode,r.willPlayForTheFirstTime=!0,r.hasPlayedForTheFirstTime=!1,r.seeking=!1,r.stalled=!1,r.collectXCdnHeader(n),r}return ze(t,e),t.prototype.collectXCdnHeader=function(e){var t=this;this.collectXCdnHeaderHandler=function(n){if(n.request.url&&n.request.url.indexOf("cdn.eurovisioncdn.net")>=0){var r=n.headers["x-cdn"]?n.headers["x-cdn"]:t.xCDN;r!==t.xCDN&&(t.xCDN=r,e.publish(T.internalPlayerEvents.xCdnChanged,{cdn:t.xCDN}))}},this.player.network.addResponseInterceptor(this.collectXCdnHeaderHandler)},t.prototype.setupUserInterface=function(e){return Ke(this,void 0,void 0,(function(){var t;return We(this,(function(n){switch(n.label){case 0:switch(this.config.playerMode){case u.VIDEO:return[3,1];case u.AUDIO:return[3,6]}return[3,7];case 1:return n.trys.push([1,4,,5]),[4,this.createOverlayControls(this.config.uiConfig,this.config.nextUpDelay,e)];case 2:return n.sent(),[4,this.createMediaControls(this.config.uiConfig,e)];case 3:return n.sent(),[3,5];case 4:throw t=n.sent(),b.createError("GUI creatie fout",{error:d.PLAYER_UI_TEMPLATE_ERROR,message:t});case 5:try{De.adjustAllSvgElementsForAccessibility(this.playerElement)}catch(e){throw b.createError("Algemene fout",{error:d.PLAYER_API_ERROR_GENERAL,message:e})}return[3,8];case 6:return[2];case 7:throw b.createError("Ongeldige modus om de speler te starten!",{error:d.PLAYER_API_ERROR_MODE,message:"Ongeldige modus om de speler te starten!"});case 8:return[2]}}))}))},t.prototype.createOverlayControls=function(e,t,n){return Ke(this,void 0,void 0,(function(){return We(this,(function(r){if(this.overlayControls=new Ye(this.playerElement,this.player,e,t),!this.overlayControls.validate())throw new Error("OverlayControls template onvolledig of incorrect!");return this.overlayControls.enable(),this.overlayControls.subscribeForInternalPlayerEvents(n),[2]}))}))},t.prototype.createMediaControls=function(e,t){return Ke(this,void 0,void 0,(function(){return We(this,(function(n){switch(n.label){case 0:return[4,Fe.waitForTheoPlayerReady(this.playerElement)];case 1:if(n.sent(),this.mediaControls=new Fe(this.playerElement,this.player,e),!this.mediaControls.validate())throw new Error("MediaControls template onvolledig of incorrect!");return this.mediaControls.enable(),this.mediaControls.subscribeForInternalPlayerEvents(t),this.mediaControls.enabledTimeEntryOnSeeker(this.seek.bind(this)),[2]}}))}))},t.prototype.addAESNetworkInterceptor=function(e){this.addAESNetworkInterceptorHandler&&this.player.network.removeRequestInterceptor(this.addAESNetworkInterceptorHandler),this.addAESNetworkInterceptorHandler=function(t){t.redirect(oe.remapAESTokenOntoLicenseRequest(t.url,e))},this.player.network.addRequestInterceptor(this.addAESNetworkInterceptorHandler)},t.prototype.setSource=function(e){e.currentSource,this.player.source=e.currentSource},t.prototype.setPosterImage=function(e){this.player.poster=e},t.prototype.play=function(){this.player.play(),this.willPlayForTheFirstTime&&(this.willPlayForTheFirstTime=!1,this.turnSubsOff(),this.publisher.publish(T.publicPlayerEvents.firstplay))},t.prototype.pause=function(){this.player.pause()},t.prototype.skipAd=function(){this.player.ads.skip()},t.prototype.skipPromotional=function(e){this.player.currentTime+=e,this.publisher.publish(T.publicPlayerEvents.promotionalskipped)},t.prototype.startCast=function(){this.player.cast.chromecast.start()},t.prototype.stopCast=function(){this.player.cast.chromecast.stop()},t.prototype.startAirplay=function(){this.player.cast.airplay.start()},t.prototype.stopAirplay=function(){this.player.cast.airplay.stop()},t.prototype.setVolume=function(e){0===e?(this.player.muted=!0,this.onVolumechange({volume:0})):this.player.muted&&0!==e?(this.player.muted=!1,this.onVolumechange({volume:this.player.volume})):this.player.volume=e},t.prototype.seek=function(e){this.player.duration&&!isNaN(this.player.duration)?e>=0&&e<=this.player.duration&&e!==1/0?this.player.currentTime=e:e===1/0&&(this.player.currentTime=Number.MAX_SAFE_INTEGER?Number.MAX_SAFE_INTEGER:Number.MAX_VALUE):setTimeout(this.seek.bind(this,e),250)},t.prototype.toggleSubs=function(){this.getActiveSubs()?this.turnSubsOff():this.turnSubsOn()},t.prototype.getActiveSubs=function(){for(var e=null,t=0,n=this.player.textTracks;t<n.length;t++){var r=n[t];if(("subtitles"===r.kind||"captions"===r.kind||"descriptions"===r.kind)&&"showing"===r.mode){e=r;break}}return e},t.prototype.turnSubsOff=function(){for(var e=0,t=this.player.textTracks;e<t.length;e++){var n=t[e];"subtitles"!==n.kind&&"captions"!==n.kind&&"descriptions"!==n.kind||(n.mode="disabled")}this.mediaControls&&this.mediaControls.toggleSubtitles(!1)},t.prototype.turnSubsOn=function(){for(var e=0,t=this.player.textTracks;e<t.length;e++){var n=t[e];if("subtitles"===n.kind||"captions"===n.kind){n.mode="showing";break}}this.mediaControls&&this.mediaControls.toggleSubtitles(!0)},t.prototype.setQuality=function(e){this.player.videoTracks[0].targetQuality=e?this.player.videoTracks[0].qualities.find((function(t){return t.bandwidth===e.bandwidth})):null},t.prototype.toggleFullscreen=function(){this.mediaControls.togglePresentationMode()},t.prototype.setAutoplay=function(e){this.player.autoplay=e},t.prototype.scheduleAd=function(e){this.adNetworkInterceptor&&(this.player.network.removeRequestInterceptor(this.adNetworkInterceptor),this.adNetworkInterceptor=null),this.adNetworkInterceptor=function(e){if(e&&e.url.search("ads-pebblemedia.adhese.com")>-1){var t={url:e.url,method:e.method,headers:e.headers,body:e.body,closed:e.closed,useCredentials:!0,type:e.type,subtype:e.subtype,responseType:e.responseType};e.redirect(t)}},this.player.network.addRequestInterceptor(this.adNetworkInterceptor),this.player.ads.schedule(e)},t.prototype.setLoop=function(e){this.player.loop=e},t.prototype.prepareForInteraction=function(){this.player.prepareWithUserAction()},t.prototype.isInterfaceEnabled=function(){return this.mediaControls.isInterfaceEnabled()&&this.overlayControls.isInterfaceEnabled()},t.prototype.disableInterface=function(){this.mediaControls.disableInterface(),this.overlayControls.disableInterface()},t.prototype.enableInterface=function(){this.mediaControls.enableInterface(),this.overlayControls.enableInterface()},t.prototype.playHeadPosition=function(){return this.player.currentTime},t.prototype.playHeadDateTimePosition=function(){return this.player.currentProgramDateTime?this.player.currentProgramDateTime:null},t.prototype.playHeadAtLivePoint=function(){return this.mediaControls.playHeadAtLivePoint()},t.prototype.getDuration=function(){return this.player.duration},t.prototype.getVolume=function(){return this.player.muted?0:this.player.volume},t.prototype.isPlaying=function(){return!this.player.paused},t.prototype.isPaused=function(){return this.player.paused},t.prototype.hasPlayed=function(){return this.hasPlayedForTheFirstTime},t.prototype.getSeekableRanges=function(){return this.player.seekable},t.prototype.isLooping=function(){return this.player.loop},t.prototype.isAdPlaying=function(){return this.player.ads.playing},t.prototype.isCasting=function(){return this.player.cast.casting||this.player.cast.airplay.casting},t.prototype.isFullscreen=function(){return!("inline"===this.player.presentation.currentMode||"picture-in-picture"===this.player.presentation.currentMode)},t.prototype.getTotalAdDuration=function(){return 0===this.player.ads.currentAds.length?this.getDuration():this.player.ads.currentAds.map((function(e){return e.duration})).reduce((function(e,t){return e+t}))},t.prototype.canAdBeSkipped=function(){var e=this.player.ads.currentAdBreak;if(e&&e.ads[0]){var t=e.ads[0];if(!t.hasOwnProperty("skipOffset")||t.skipOffset<=0)return!1;var n=t.duration-t.skipOffset;return(e.maxRemainingDuration>=0?e.maxRemainingDuration:t.duration-this.playHeadPosition())<n}return!1},t.prototype.getAvailableQualities=function(){return this.player.videoTracks&&this.player.videoTracks.length>=1?this.player.videoTracks[0].qualities.map((function(e){return new v(e.frameRate,e.bandwidth,e.width,e.height)})):[]},t.prototype.getActiveQuality=function(){if(this.player.videoTracks&&this.player.videoTracks.length>=1){var e=this.player.videoTracks[0].activeQuality;if(e)return new v(e.frameRate,e.bandwidth,e.width,e.height)}return null},t.prototype.getAutoplay=function(){return this.player.autoplay},t.prototype.getDroppedFrameCount=function(){return this.player.metrics.droppedVideoFrames},t.prototype.getNativePlayerInstance=function(){return this.player},t.prototype.onPlayerDestroyRequested=function(){this.publisher.publish(T.internalPlayerEvents.destroy)},t.prototype.onPlayerResetRequested=function(){this.willPlayForTheFirstTime=!0,this.hasPlayedForTheFirstTime=!1},t.prototype.releasePlayerResources=function(){this.player.destroy(),this.playerElement.parentElement.removeChild(this.playerElement)},t.prototype.bindAbstractedPlayerEvents=function(){var e=this;this.player.addEventListener("play",this.onPlay.bind(this)),this.player.addEventListener("pause",this.onPause.bind(this)),this.player.addEventListener("ended",this.onEnded.bind(this)),this.player.addEventListener("volumechange",this.onVolumechange.bind(this)),this.player.addEventListener("seeking",this.onSeeking.bind(this)),this.player.addEventListener("seeked",this.onSeekComplete.bind(this)),this.player.addEventListener("waiting",this.onBufferring.bind(this)),this.player.addEventListener("playing",this.onBufferComplete.bind(this)),this.player.addEventListener("timeupdate",this.onTimeUpdate.bind(this)),this.player.videoTracks.addEventListener("addtrack",(function(t){t.track.addEventListener("activequalitychanged",e.onVideoQualityChanged.bind(e))})),this.player.audioTracks.addEventListener("addtrack",(function(t){t.track.addEventListener("activequalitychanged",e.onAudioQualityChanged.bind(e))})),this.player.addEventListener("readystatechange",this.onReadyStateChanged.bind(this)),this.player.addEventListener("sourcechange",this.onSourceChanged.bind(this)),this.player.addEventListener("durationchange",this.onDurationChanged.bind(this)),this.player.addEventListener("error",this.onInternalPlayerError.bind(this)),this.player.addEventListener("contentprotectionerror",this.onDrmError.bind(this)),this.player.presentation.addEventListener("presentationmodechange",this.onFullscreenChange.bind(this)),this.player.presentation.addEventListener("error",this.onInternalPlayerError.bind(this)),this.player.cast.chromecast.addEventListener("statechange",this.onCastStateChanged.bind(this)),this.player.cast.chromecast.addEventListener("error",this.onCastError.bind(this)),this.player.cast.airplay.addEventListener("statechange",this.onCastStateChanged.bind(this)),this.player.ads.addEventListener("adbreakbegin",this.onAdBreakBegin.bind(this)),this.player.ads.addEventListener("adbreakend",this.onAdBreakEnd.bind(this)),this.player.ads.addEventListener("adskip",this.onAdSkipped.bind(this)),this.player.ads.addEventListener("aderror",this.onAdError.bind(this)),this.player.network.addEventListener("offline",this.onNetworkError.bind(this))},t.prototype.onPlay=function(e){this.willPlayForTheFirstTime&&(this.willPlayForTheFirstTime=!1,this.turnSubsOff(),this.publisher.publish(T.publicPlayerEvents.firstplay)),this.player.currentTime=this.player.currentTime,this.hasPlayedForTheFirstTime=!0,this.publisher.publish(T.publicPlayerEvents.play),this.publisher.publish(T.publicPlayerEvents.playing)},t.prototype.onPause=function(e){this.publisher.publish(T.publicPlayerEvents.pause)},t.prototype.onEnded=function(e){this.publisher.publish(T.publicPlayerEvents.ended)},t.prototype.onVolumechange=function(e){this.player.muted&&0!==e.volume||(e.volume,this.publisher.publish(T.publicPlayerEvents.volumechange,{volume:e.volume}))},t.prototype.onFullscreenChange=function(e){this.isFullscreen()?this.publisher.publish(T.publicPlayerEvents.fullscreenenter):this.publisher.publish(T.publicPlayerEvents.fullscreenexit)},t.prototype.onCastStateChanged=function(e){this.isCasting()?this.publisher.publish(T.publicPlayerEvents.castingstarted):this.publisher.publish(T.publicPlayerEvents.castingstopped)},t.prototype.onSeeking=function(e){this.seeking||(this.seeking=!0,this.publisher.publish(T.publicPlayerEvents.seeking))},t.prototype.onSeekComplete=function(e){this.seeking&&(this.seeking=!1,this.publisher.publish(T.publicPlayerEvents.seeked,{position:this.playHeadPosition(),duration:this.getDuration()}))},t.prototype.onBufferring=function(e){this.stalled||(this.stalled=!0,this.publisher.publish(T.publicPlayerEvents.buffering))},t.prototype.onBufferComplete=function(e){this.stalled&&(this.stalled=!1,this.publisher.publish(T.publicPlayerEvents.bufferingCompleted))},t.prototype.onVideoQualityChanged=function(e){e.quality;var t={video:new v(e.quality.frameRate,e.quality.bandwidth,e.quality.width,e.quality.height),audio:null};e.quality.width,e.quality.height,e.quality.bandwidth,this.mediaControls.updateQualityListItems(this.publisher,this.getAvailableQualities(),t.video,void 0===this.player.videoTracks[0].targetQuality),this.publisher.publish(T.publicPlayerEvents.qualitychanged,t)},t.prototype.onAudioQualityChanged=function(e){var t={video:null,audio:new Le(e.quality.bandwidth,e.quality.audioSamplingRate)};e.quality.bandwidth,this.publisher.publish(T.publicPlayerEvents.qualitychanged,t)},t.prototype.onReadyStateChanged=function(e){var t={loaded:!1};e.readyState>0&&(t.loaded=!0),this.publisher.publish(T.publicPlayerEvents.sourceloaded,t)},t.prototype.onSourceChanged=function(e){this.previousDrmError=null;var t={sourceDescription:Object.setPrototypeOf(e.source,M.prototype),xCDN:this.xCDN};this.publisher.publish(T.publicPlayerEvents.sourcechanged,t)},t.prototype.onDurationChanged=function(e){this.publisher.publish(T.internalPlayerEvents.durationSet)},t.prototype.onAdBreakBegin=function(e){var t;t="google-ima"===e.ad.integration?{id:"IMA-ID",name:"IMA-AD",duration:-1,resourceUri:"dummy-resource-uri",affiliate:"IMA-ad-affiliate",campaign:"IMA-ad-campaign",advertiser:"IMA-ad-advertiser"}:{id:e.ad.ads[0].id,name:"VAST-AD",duration:e.ad.maxDuration,resourceUri:e.ad.ads[0].resourceURI,affiliate:"VAST-ad-affiliate",campaign:"VAST-ad-campaign",advertiser:"VAST-ad-advertiser"},this.publisher.publish(T.publicPlayerEvents.adbreakbegin,t)},t.prototype.onAdBreakEnd=function(e){this.publisher.publish(T.publicPlayerEvents.adbreakend)},t.prototype.onAdSkipped=function(e){this.publisher.publish(T.publicPlayerEvents.adskipped)},t.prototype.onTimeUpdate=function(e){this.publisher.publish(T.publicPlayerEvents.timeupdate)},t.prototype.onInternalPlayerError=function(e){e.error.indexOf("Unknown CDM error")>-1||e.error.indexOf("Something went wrong during native playback.")>-1||e.error.indexOf("No supported key system has been found among the ContentProtection elements")>-1||"Something went wrong determining the initial Period of the provided MPEG-DASH stream"===e.error?this.onDrmError(e):e.error.indexOf("The provided MPEG-DASH document could not be updated")>-1||"The Widevine vuDRM token has not been correctly configured."===e.error||this.publisher.errorHandler.handleError(d.PLAYER_API_ERROR_GENERAL,"errors-an-internal-error-occurred",e)},t.prototype.onDrmError=function(e){var t=(new Date).getTime();(!this.previousDrmError||t-this.previousDrmError>500)&&this.publisher.errorHandler.handleWarning(d.PLAYER_API_ERROR_DRM,"warning-an-error-occurred-with-the-video-security",e),this.previousDrmError=t},t.prototype.onAdError=function(e){this.publisher.errorHandler.handleWarning(d.PLAYER_ADS_API_GENERAL,"warning-the-ad-cannot-be-played",e)},t.prototype.onNetworkError=function(e){this.publisher.errorHandler.handleError(d.PLAYER_NETWORK_API_GENERAL,"errors-a-network-error-occurred",e)},t.prototype.onCastError=function(e){this.publisher.errorHandler.handleWarning(d.PLAYER_CHROMECAST_API_GENERAL,"warning-an-error-occurred-during-casting",e)},t}(Qe),Xe=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ze=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))},$e=function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},et=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.playerElement.style.display="none",r.willPlayForTheFirstTimeOverridden=!0,r.hasPlayedForTheFirstTimeOverridden=!1,r}return Xe(t,e),t.prototype.setupUserInterface=function(e){return Ze(this,void 0,void 0,(function(){return $e(this,(function(e){return[2]}))}))},t.prototype.play=function(){this.player.play(),this.willPlayForTheFirstTimeOverridden&&(this.willPlayForTheFirstTimeOverridden=!1,this.publisher.publish(T.publicPlayerEvents.firstplay))},t.prototype.onPlay=function(e){this.willPlayForTheFirstTimeOverridden&&(this.willPlayForTheFirstTimeOverridden=!1,this.publisher.publish(T.publicPlayerEvents.firstplay)),this.hasPlayedForTheFirstTimeOverridden=!0,this.publisher.publish(T.publicPlayerEvents.play),this.publisher.publish(T.publicPlayerEvents.playing)},t.prototype.hasPlayed=function(){return this.hasPlayedForTheFirstTimeOverridden},t}(Je),tt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),nt=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))},rt=function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},it=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.firstTimePlay=!0,r.previousPlaybackState=-1,r.seeking=!1,r.stalled=!1,r}return tt(t,e),t.loadPlayerWithVideo=function(e,n,r){return e.id=e.getAttribute("data-id"),e.classList.add("player-youtube-frame"),new Promise((function(n,i){if(!window.YT||!window.YT.Player)return r.errorHandler.handleError(d.PLAYER_YOUTUBE_ERROR_GENERAL,"errors-cannot-load-youtube-video",{YT:window.YT}),void i("Cannot load YouTube video!");new window.YT.Player(e.id,{width:"100%",height:"100%",events:{onReady:function(e){n(new t(e.target,r)),r.publish(T.internalPlayerEvents.durationSet)}}})}))},t.prototype.setupUserInterface=function(e){return nt(this,void 0,void 0,(function(){return rt(this,(function(e){return[2]}))}))},t.prototype.addAESNetworkInterceptor=function(e){},t.prototype.setSource=function(e){this.player.cueVideoById({videoId:F.extractYoutubeReference(e.targetUrls[0].url)})},t.prototype.setPosterImage=function(e){},t.prototype.play=function(){this.firstTimePlay&&(this.publisher.publish(T.publicPlayerEvents.firstplay),this.firstTimePlay=!1),this.player.playVideo()},t.prototype.pause=function(){this.player.pauseVideo()},t.prototype.skipAd=function(){},t.prototype.skipPromotional=function(e){},t.prototype.startCast=function(){},t.prototype.stopCast=function(){},t.prototype.startAirplay=function(){},t.prototype.stopAirplay=function(){},t.prototype.setVolume=function(e){this.player.setVolume(100*e),this.onVolumechange(null)},t.prototype.seek=function(e){this.player.seekTo(e,!0),this.onSeeking(null)},t.prototype.toggleSubs=function(){},t.prototype.turnSubsOn=function(){},t.prototype.turnSubsOff=function(){},t.prototype.getActiveSubs=function(){return null},t.prototype.setQuality=function(e){},t.prototype.toggleFullscreen=function(){},t.prototype.scheduleAd=function(e){},t.prototype.setLoop=function(e){},t.prototype.prepareForInteraction=function(){},t.prototype.isInterfaceEnabled=function(){return!1},t.prototype.disableInterface=function(){},t.prototype.enableInterface=function(){},t.prototype.playHeadPosition=function(){return this.player.getCurrentTime()},t.prototype.playHeadDateTimePosition=function(){return null},t.prototype.playHeadAtLivePoint=function(){return!1},t.prototype.getDuration=function(){return this.player.getDuration()},t.prototype.getVolume=function(){return this.player.getVolume()/100},t.prototype.isPlaying=function(){return this.player.getPlayerState()===YT.PlayerState.PLAYING},t.prototype.isPaused=function(){return this.player.getPlayerState()===YT.PlayerState.PAUSED},t.prototype.hasPlayed=function(){return!this.firstTimePlay},t.prototype.getSeekableRanges=function(){return null},t.prototype.isLooping=function(){return!1},t.prototype.isAdPlaying=function(){return!1},t.prototype.isCasting=function(){return!1},t.prototype.isFullscreen=function(){return!1},t.prototype.getTotalAdDuration=function(){return 0},t.prototype.canAdBeSkipped=function(){return!1},t.prototype.getAvailableQualities=function(){return[]},t.prototype.getActiveQuality=function(){return null},t.prototype.getDroppedFrameCount=function(){return 0},t.prototype.getNativePlayerInstance=function(){return this.player},t.prototype.onPlayerResetRequested=function(){},t.prototype.onPlayerDestroyRequested=function(){this.publisher.publish(T.internalPlayerEvents.destroy)},t.prototype.releasePlayerResources=function(){this.player.a.parentElement.removeChild(this.player.a),clearInterval(this.eventInterval)},t.prototype.onTimeUpdate=function(e){this.publisher.publish(T.publicPlayerEvents.timeupdate)},t.prototype.getAutoplay=function(){return!1},t.prototype.setAutoplay=function(e){},t.prototype.bindAbstractedPlayerEvents=function(){var e=this;this.player.addEventListener("onStateChange",this.onPlay.bind(this)),this.player.addEventListener("onStateChange",this.onPause.bind(this)),this.player.addEventListener("onStateChange",this.onEnded.bind(this)),this.player.addEventListener("onStateChange",this.onBufferring.bind(this)),this.player.addEventListener("onStateChange",this.onBufferComplete.bind(this)),this.player.addEventListener("onPlaybackQualityChange",this.onVideoQualityChanged.bind(this)),this.player.addEventListener("onReady",this.onReadyStateChanged.bind(this)),this.player.addEventListener("onError",this.onInternalPlayerError.bind(this));var t=this.getVolume();this.eventInterval=setInterval((function(){var n=e.getVolume();t!==n&&(t=n,e.publisher.publish(T.publicPlayerEvents.volumechange,{volume:n}))}),1e3)},t.prototype.onPlay=function(e){var t=this;this.seeking?this.onSeekComplete(null):(e.data===YT.PlayerState.PLAYING&&(this.previousPlaybackState=YT.PlayerState.PLAYING,this.firstTimePlay&&(this.publisher.publish(T.publicPlayerEvents.firstplay),this.firstTimePlay=!1),this.publisher.publish(T.publicPlayerEvents.play),this.publisher.publish(T.publicPlayerEvents.playing)),setInterval((function(){t.previousPlaybackState===YT.PlayerState.PLAYING&&t.onTimeUpdate(null)}),250))},t.prototype.onPause=function(e){e.data===YT.PlayerState.PAUSED&&(this.previousPlaybackState=YT.PlayerState.PAUSED,this.publisher.publish(T.publicPlayerEvents.pause))},t.prototype.onEnded=function(e){e.data===YT.PlayerState.ENDED&&(this.previousPlaybackState=YT.PlayerState.ENDED,this.publisher.publish(T.publicPlayerEvents.ended))},t.prototype.onVolumechange=function(e){var t={volume:this.getVolume()};this.publisher.publish(T.publicPlayerEvents.volumechange,t)},t.prototype.onFullscreenChange=function(e){},t.prototype.onCastStateChanged=function(e){},t.prototype.onSeeking=function(e){this.seeking||(this.seeking=!0,this.publisher.publish(T.publicPlayerEvents.seeking))},t.prototype.onSeekComplete=function(e){this.seeking&&(this.seeking=!1,this.publisher.publish(T.publicPlayerEvents.seeked))},t.prototype.onBufferring=function(e){this.stalled||(this.stalled=!0,e.data===YT.PlayerState.BUFFERING&&(this.previousPlaybackState=YT.PlayerState.BUFFERING,this.publisher.publish(T.publicPlayerEvents.buffering)))},t.prototype.onBufferComplete=function(e){this.stalled&&(this.stalled=!1,this.previousPlaybackState===YT.PlayerState.BUFFERING&&e.data!==YT.PlayerState.BUFFERING&&(this.previousPlaybackState=e.data,this.publisher.publish(T.publicPlayerEvents.bufferingCompleted)))},t.prototype.onVideoQualityChanged=function(e){},t.prototype.onAudioQualityChanged=function(e){},t.prototype.onReadyStateChanged=function(e){this.publisher.publish(T.publicPlayerEvents.sourceloaded,{loaded:!0})},t.prototype.onSourceChanged=function(e){},t.prototype.onAdBreakBegin=function(e){},t.prototype.onAdBreakEnd=function(e){},t.prototype.onAdSkipped=function(e){},t.prototype.onInternalPlayerError=function(e){this.publisher.errorHandler.handleYouTubeError(e.data)},t.prototype.onDrmError=function(e){},t.prototype.onAdError=function(e){},t.prototype.onCastError=function(e){},t.prototype.onNetworkError=function(e){},t}(Qe),at=function(){function e(e,t){if(this.currentIndex=0,e instanceof Array){if(t&&(!(t instanceof Array)||e.length!==t.length))throw new Error("If DigitalData is provided, the number of instances must match the number the number of mediaReferences!");this.items=e,this.digitalDatas=t||[]}else this.items=[e],this.digitalDatas=[t]}return e.prototype.current=function(){return{index:this.currentIndex,playlistSize:this.items.length,mediaReference:this.items[this.currentIndex],digitalData:this.digitalDatas[this.currentIndex]}},e.prototype.next=function(){return this.currentIndex+1<this.items.length?{index:++this.currentIndex,playlistSize:this.items.length,mediaReference:this.items[this.currentIndex],digitalData:this.digitalDatas[this.currentIndex]}:null},e.prototype.hasNext=function(){return this.currentIndex+1<this.items.length},e.prototype.peek=function(){return this.currentIndex+1<this.items.length?{index:this.currentIndex+1,playlistSize:this.items.length,mediaReference:this.items[this.currentIndex+1],digitalData:this.digitalDatas[this.currentIndex+1]}:null},e.prototype.previous=function(){return this.currentIndex-1>=0?{index:--this.currentIndex,playlistSize:this.items.length,mediaReference:this.items[this.currentIndex],digitalData:this.digitalDatas[this.currentIndex]}:null},e.prototype.hasPrevious=function(){return this.currentIndex-1>=0},e.prototype.length=function(){return this.items.length},e.prototype.append=function(e,t){this.items.push(e),this.digitalDatas.push(t)},e.prototype.getIndexForMediaReference=function(e){return this.items.indexOf(e)},e.prototype.setTo=function(e){return e>=0&&e<this.items.length?(this.currentIndex=e,{index:this.currentIndex,playlistSize:this.items.length,mediaReference:this.items[this.currentIndex],digitalData:this.digitalDatas[this.currentIndex]}):null},e}();const ot=JSON.parse('{"domains":{"canvas":"setv","cobra":"setv","een":"setv","fansofflanders":"setv","mnm":"seradio","radio1":"seradio","sporza":"sesport","stubru":"seradio","vuplay":"setv","sporza_spv_workaround":"sewk2018","dagelijksekost":"seculinair","radio2":"seradio"},"partners":{"canvas":{"name":"Canvas"},"vrtvideo":{"name":"VRT Video"},"sanoma":{"name":"Sanoma"},"roularta":{"name":"Roularta"},"pebblemedia":{"name":"Pebblemedia"},"newsmonkey":{"name":"Newsmonkey"},"metrotime":{"name":"Metrotime"},"mediahuis":{"name":"Mediahuis"},"humo":{"name":"Humo"},"depersgroep":{"name":"De Persgroep","ads":false},"vrt":{"name":"VRT"},"belga":{"name":"Belga"},"rtbf":{"name":"RTBF"},"demorgen":{"name":"De Morgen"},"hln":{"name":"Het Laatste Nieuws"},"proximus":{"name":"Proximus"},"andere":{"name":"Andere"},"zita":{"name":"Zita"},"sporza_workaround":{"name":"sporza"}},"programs":["Koppen","Ook getest op mensen","Panorama","Reyers Laat","TerZake","Villa Politica","Volt","Voor hetzelfde geld","Vranckx","Vranckx op zaterdag","De Afspraak","Keien van de wetstraat"]}');var lt,st=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))},ut=function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},ct=function(){function e(e,t,n,r,i){void 0===i&&(i=window.location.hostname),this.hostname=i,this.pal=t,this.errorHandler=n,this.productionMode=r,this.adConfiguration=e,this.adMappings=ot,this.productionMode||(this.adMappings.partners.pebblemedia={name:"Pebble Media",ads:!0}),this.baseUrl="https://ads-pebblemedia.adhese.com/ad/sl_%%CONTENT%%_%%LOCATION%%_-preroll/%%CATEGORY%%/dt%%DEVICE%%/tl%%CONSENT%%%%EU%%/?t=%%TIMESTAMP%%",this.baseVPaidUrl="https://ads-pebblemedia.adhese.com/ad/sevpaid/sl_%%CONTENT%%_%%LOCATION%%_-preroll/?t=%%TIMESTAMP%%"}return e.prototype.createAdForVideoIfNeeded=function(e,t){return st(this,void 0,void 0,(function(){return ut(this,(function(n){return!this.adConfiguration||0===Object.keys(this.adConfiguration).length&&this.adConfiguration.constructor===Object?[2,null]:[2,this.adConfiguration.gamAdUrl?this.generateGamStyleAd(this.adConfiguration.gamAdUrl):this.generateOldStyleAd(e,t)]}))}))},e.prototype.generateGamStyleAd=function(e){var t=null;return e&&(t={sources:{src:e,type:"vmap"},timeOffset:"start",integration:"google-ima"},this.adConfiguration.isVastViaIma||this.adConfiguration.isVPaid||(t.skipOffset=15)),t},e.prototype.generateOldStyleAd=function(e,t){var n,r=this.adConfiguration.category?this.adConfiguration.category.toLowerCase():"",i=this.adConfiguration.partner?this.adConfiguration.partner.toLowerCase():"",a=this.adConfiguration.location?this.adConfiguration.location:"content-vrt";if(e=e?e.toLowerCase():null,this.adConfiguration.domain)n=this.adConfiguration.domain;else{var o=this.hostname.toLowerCase().split(".");n=o[o.length-2]}var l=this.adConfiguration.isVPaid?this.baseVPaidUrl:this.baseUrl,s=this.adConfiguration.consent?this.adConfiguration.consent:"none",u=this.adConfiguration.euConsent?"/xt"+this.adConfiguration.euConsent:"",c=null;this.isSyndicated(i)?this.partnerAdsAllowed(i)&&(""===r&&(r=this.getCategoryForDomain(n)),c=this.createAdUrl(l,i,a,r,s,u)):this.prerollEnabledForDomain(n)&&this.prerollEnabledForProgram(e)&&(t<=0||t>30)&&(""===r&&(r=this.getCategoryForDomain(n)),"senieuws"!==r&&(c=this.createAdUrl(l,n,a,r,s,u)));var p=null;return c&&(p={sources:{src:c},timeOffset:"start",integration:this.detectAdTech(this.adConfiguration)},this.adConfiguration.isVastViaIma||this.adConfiguration.isVPaid||(p.skipOffset=15)),p},e.prototype.createAdUrl=function(e,t,n,r,i,a){return e.replace("%%CONTENT%%",t).replace("%%LOCATION%%",n).replace("%%CATEGORY%%",r).replace("%%DEVICE%%",D.getPlatform()).replace("%%CONSENT%%",i).replace("%%EU%%",a).replace("%%TIMESTAMP%%",Date.now()+"")},e.prototype.isSyndicated=function(e){return this.adMappings.partners.hasOwnProperty(e)},e.prototype.partnerAdsAllowed=function(e){return!this.adMappings.partners.hasOwnProperty(e)||!this.adMappings.partners[e].hasOwnProperty("ads")||this.adMappings.partners[e].ads},e.prototype.getCategoryForDomain=function(e){return this.adMappings.domains.hasOwnProperty(e)?this.adMappings.domains[e]:"senieuws"},e.prototype.prerollEnabledForDomain=function(e){return this.adMappings.domains.hasOwnProperty(e)},e.prototype.prerollEnabledForProgram=function(e){if(!e)return!0;for(var t=0,n=this.adMappings.programs;t<n.length;t++){var r=n[t];if((r=r.toLowerCase())===e||r.search(e)>0||e.search(r)>0)return!1}return!0},e.prototype.detectAdTech=function(e){return e.hasOwnProperty("isVastViaIma")?e.hasOwnProperty("isVPaid")?e.isVPaid||e.isVastViaIma?"google-ima":"theo":e.isVastViaIma?"google-ima":"theo":"google-ima"},e}(),pt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),dt=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))},ht=function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},yt=function(e){function t(t,n){return e.call(this,t,n)||this}return pt(t,e),t.prototype.setupAds=function(e,t){return new ct(this.config.adConfig,t,e.errorHandler,this.state.productionMode)},t.prototype.setupAnalytics=function(e,t){return this.config.authoringMode?null:{adobeAnalytics:new I(this.config.playerMode,t,this.state.mediaInfo,e),cim:new G(this.config.playerMode,this.config.containerElement,t,this.state.mediaInfo,e,this.config.cimId)}},t.prototype.prepareSourceForPlayback=function(){return dt(this,void 0,void 0,(function(){var e;return ht(this,(function(t){switch(t.label){case 0:this.ilc.pal.addAESNetworkInterceptor(this.state.mediaInfo.drm),e=null,t.label=1;case 1:return t.trys.push([1,3,,4]),[4,this.ilc.pebbleService.createAdForVideoIfNeeded(this.state.mediaInfo.title,this.state.mediaInfo.duration)];case 2:return e=t.sent(),this.state.adIntegration=null==e?void 0:e.integration,[3,4];case 3:return t.sent(),[3,4];case 4:return this.ilc.pal.setPosterImage(this.state.mediaInfo.posterImageUrl),this.state.mediaInfo.currentSource=this.ilc.mediaEnricher.sourceService.getNextSource(this.state.mediaInfo,e,this.config.isLiveStartOver,this.config.startOverBegin,this.config.startOverEnd),this.ilc.pal.setSource(this.state.mediaInfo),[2]}}))}))},t.prototype.markPlayerReadyForPlaybackSpecific=function(){var e=this;this.ilc.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.play,this.onPlay.bind(this)),this.ilc.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.startover,this.onStartOver.bind(this)),this.ilc.publisher.addRemovableEventListener(this.eventHandlers,T.publicPlayerEvents.warning,this.onInternalPlayerWarning.bind(this)),this.updateTitle(),this.state.mediaInfo.isLiveToUrl()&&this.ilc.publisher.addOneTimeSubscriber(T.publicPlayerEvents.firstplay,(function(){e.ilc.pal.seek(0)})),this.state.mediaInfo.isLiveStream()&&(this.ilc.mediaEnricher.autoUpdateLiveSchedule(60,this.state.mediaInfo),this.ilc.publisher.addOneTimeSubscriber(T.publicPlayerEvents.play,(function(){e.ilc.publisher.addOneTimeSubscriber(T.publicPlayerEvents.timeupdate,(function(){e.ilc.pal.turnSubsOff()}))})))},t.prototype.updateTitle=function(){var e=this.state.mediaInfo;this.config.uiConfig&&this.config.uiConfig.disableTitle||(e.isLiveStream()&&e.activeScheduleItem?(this.state.currentTitle&&this.state.currentTitle!==e.activeScheduleItem.title&&this.ilc.publisher.publish(T.publicPlayerEvents.liveprogramchange,{newProgramTitle:this.state.currentTitle}),this.state.currentTitle=e.activeScheduleItem.title):this.state.currentTitle=this.state.mediaInfo.title,this.ilc.publisher.publish(T.internalPlayerEvents.updateTitle,{newTitle:this.state.currentTitle,isHidden:this.state.titleIsHidden}))},t.prototype.updateTickSpecific=function(){var e=this.state.mediaInfo;this.ilc.mediaEnricher.updateMediaEnrichment(this.ilc.pal,this.state.mediaInfo),this.updateTitle(),this.ilc.publisher.publish(T.internalPlayerEvents.updateTick,{enableStartOver:!!this.ilc.mediaEnricher.sourceService.canDoStartOver(this.state.mediaInfo.activeScheduleItem)}),this.ensureLongPlayback(),this.adIsPlaying()?(this.state.canSkipAdOrPromotional=this.ilc.pal.canAdBeSkipped(),this.state.canSeekDispatched&&(this.ilc.publisher.publish(T.publicPlayerEvents.seekNotAllowed),this.state.canSeekDispatched=!1),this.ilc.publisher.publish(T.internalPlayerEvents.adIsPlayingTick,{promotionalTitle:"Advertentie",canSkip:this.state.canSkipAdOrPromotional,adIntegration:this.state.adIntegration,remainingDuration:Math.round(this.ilc.pal.getTotalAdDuration()-this.ilc.pal.playHeadPosition())})):this.typeIsPlaying(ce.types.PROMOTIONAL)?(this.state.canSkipAdOrPromotional=!(!e.activePlaylistItem.item||!e.activePlaylistItem.item.skippable)||this.ilc.pal.canAdBeSkipped(),this.state.canSeekDispatched&&(this.ilc.publisher.publish(T.publicPlayerEvents.seekNotAllowed),this.state.canSeekDispatched=!1),this.ilc.publisher.publish(T.internalPlayerEvents.promotionalIsPlayingTick,{promotionalTitle:"Sponsoring",canSkip:this.state.canSkipAdOrPromotional,remainingDuration:e.remainingPlaylistItemDuration})):this.typeIsPlaying(ce.types.ONBOARDING)?(this.state.canSkipAdOrPromotional=!(!e.activePlaylistItem.item||!e.activePlaylistItem.item.skippable)||this.ilc.pal.canAdBeSkipped(),this.state.canSeekDispatched&&(this.ilc.publisher.publish(T.publicPlayerEvents.seekNotAllowed),this.state.canSeekDispatched=!1),this.ilc.publisher.publish(T.internalPlayerEvents.onboardingIsPlayingTick,{promotionalTitle:"",canSkip:this.state.canSkipAdOrPromotional,remainingDuration:e.remainingPlaylistItemDuration})):this.typeIsPlaying(ce.types.TRAILER)?(this.ilc.pal.hasPlayed()&&(this.state.canSkipAdOrPromotional=e.activePlaylistItem.item&&e.activePlaylistItem.item.skippable),this.state.canSeekDispatched&&(this.ilc.publisher.publish(T.publicPlayerEvents.seekNotAllowed),this.state.canSeekDispatched=!1),this.ilc.publisher.publish(T.internalPlayerEvents.trailerIsPlayingTick,{hasPlayed:this.ilc.pal.hasPlayed(),promotionalTitle:"Trailer",canSkip:this.state.canSkipAdOrPromotional,remainingDuration:e.remainingPlaylistItemDuration})):(this.state.canSeekDispatched||(this.ilc.publisher.publish(T.publicPlayerEvents.seekAllowed),this.state.canSeekDispatched=!0),this.ilc.publisher.publish(T.internalPlayerEvents.normalContentIsPlayingTick,{isPaused:this.ilc.pal.isPaused(),isLive:this.state.mediaInfo.isLiveStream(),playHeadPosition:this.ilc.pal.playHeadDateTimePosition()}))},t.prototype.ensureLongPlayback=function(){oe.isDrmTokenAboutToExpire(this.state.mediaInfo.drmExpired)&&this.ilc.publisher.publish(T.internalPlayerEvents.forceReload,{newIdentityToken:this.config.identityToken})},t.prototype.onPlay=function(e){this.ilc.publisher.publish(T.internalPlayerEvents.play,{isLive:this.state.mediaInfo.isLiveStream(),currentVolume:this.ilc.pal.getVolume()})},t.prototype.onStartOver=function(e){var t=this.state.mediaInfo;t.isLiveStream()?t.currentSource?this.ilc.publisher.publish(T.internalPlayerEvents.forceReload,{newIdentityToken:this.config.identityToken,performLiveStartOver:!0}):this.ilc.publisher.errorHandler.handleError(d.PLAYER_FUNCTIONS_STARTOVER,"errors-cannot-perform-startover"):this.ilc.pal.seek(0)},t.prototype.onInternalPlayerWarning=function(e){return dt(this,void 0,void 0,(function(){var t=this;return ht(this,(function(n){switch(n.label){case 0:return e.code!==d.PLAYER_API_ERROR_DRM?[3,4]:(this.state.mediaInfo.currentSource=this.ilc.mediaEnricher.sourceService.getNextSource(this.state.mediaInfo),this.state.mediaInfo.currentSource?(this.ilc.pal.setSource(this.state.mediaInfo),this.state.mediaInfo.isLiveToUrl()&&this.ilc.publisher.addOneTimeSubscriber(T.publicPlayerEvents.firstplay,(function(){return dt(t,void 0,void 0,(function(){return ht(this,(function(e){switch(e.label){case 0:return[4,O.wait(100)];case 1:return e.sent(),this.ilc.pal.seek(0),[2]}}))}))})),this.ilc.pal.prepareForInteraction(),this.ilc.pal.hasPlayed()?[4,O.wait(100)]:[3,2]):[3,3]);case 1:n.sent(),this.ilc.pal.play(),n.label=2;case 2:return[3,4];case 3:this.ilc.publisher.errorHandler.handleError(d.PLAYER_FUNCTIONS_SOURCE_FALLTHROUGH,"errors-cannot-select-a-next-source"),n.label=4;case 4:return[2]}}))}))},t.prototype.adIsPlaying=function(){return this.ilc.pal.isAdPlaying()},t.prototype.typeIsPlaying=function(e){return this.state.mediaInfo.activePlaylistItem&&this.state.mediaInfo.activePlaylistItem.item&&this.state.mediaInfo.activePlaylistItem.item.eventType.toLowerCase()===e.toLowerCase()},t.prototype.onPlayerErrorSpecific=function(e,t){clearInterval(this.state.updateInterval),t.code!==d.AGGREGATOR_ERROR_NOT_AUTHENTICATED&&t.code!==d.AGGREGATOR_ERROR_INCOMPLETE_PROFILE&&t.code!==d.AGGREGATOR_ERROR_NOT_AUTHENTICATED_AND_ROAMING_REQUIRED&&t.code!==d.AGGREGATOR_V2_UNMAPPED||te.clearToken(),this.config.showNoErrors||e.publish(T.internalPlayerEvents.showError,{name:t.name,message:t.message})},t.prototype.onPlayerResetRequestedSpecific=function(){},t}(ke),ft=function(){function e(){}return e.decorateEventingApi=function(e,t){e.hasOwnProperty("addEventListener")&&e.hasOwnProperty("removeEventListener")&&e.hasOwnProperty("destroy")||(Object.defineProperty(e,"addEventListener",{value:function(e,n){t.addSubscriber(t.detectPublicEventTypeFromString(e),n)}}),Object.defineProperty(e,"removeEventListener",{value:function(e,n){t.removeSubscriber(t.detectPublicEventTypeFromString(e),n)}}),Object.defineProperty(e,"destroy",{value:function(){t.publish(T.apiCallEvents.destroyApiCall)}}))},e.decoratePublicApi=function(t,n){!Object.isExtensible(t)&&Object.isSealed(t)&&Object.isFrozen(t)||(e.addProperties(t,n),e.addMethods(t,n),Object.preventExtensions(t),Object.seal(t),Object.freeze(t))},e.addProperties=function(e,t){this.addProperty(t,e,"muted",{setEvent:T.apiCallEvents.muteApiCallSet,getEvent:T.apiCallEvents.muteApiCallGet,getEventReturn:T.apiCallEvents.muteApiCallGetReturn}),this.addProperty(t,e,"volume",{setEvent:T.apiCallEvents.volumeApiCallSet,getEvent:T.apiCallEvents.volumeApiCallGet,getEventReturn:T.apiCallEvents.volumeApiCallGetReturn}),this.addProperty(t,e,"duration",{getEvent:T.apiCallEvents.durationApiCallGet,getEventReturn:T.apiCallEvents.durationApiCallGetReturn}),this.addProperty(t,e,"currentTime",{setEvent:T.apiCallEvents.currentTimeApiCallSet,getEvent:T.apiCallEvents.currentTimeApiCallGet,getEventReturn:T.apiCallEvents.currentTimeApiCallGetReturn}),this.addProperty(t,e,"currentDateTime",{getEvent:T.apiCallEvents.currentDateTimeApiCallGet,getEventReturn:T.apiCallEvents.currentDateTimeApiCallGetReturn}),this.addProperty(t,e,"paused",{getEvent:T.apiCallEvents.pausedApiCallGet,getEventReturn:T.apiCallEvents.pausedApiCallGetReturn}),this.addProperty(t,e,"loop",{setEvent:T.apiCallEvents.loopApiCallSet,getEvent:T.apiCallEvents.loopApiCallGet,getEventReturn:T.apiCallEvents.loopApiCallGetReturn}),this.addProperty(t,e,"currentSrc",{getEvent:T.apiCallEvents.currentSrcApiCallGet,getEventReturn:T.apiCallEvents.currentSrcApiCallGetReturn}),this.addProperty(t,e,"currentMediaReference",{getEvent:T.apiCallEvents.currentMediaReferenceApiCallGet,getEventReturn:T.apiCallEvents.currentMediaReferenceApiCallGetReturn}),this.addProperty(t,e,"src",{setEvent:T.apiCallEvents.srcApiCallSet,getEvent:T.apiCallEvents.srcApiCallGet,getEventReturn:T.apiCallEvents.srcApiCallGetReturn}),this.addProperty(t,e,"seekable",{getEvent:T.apiCallEvents.seekableApiCallGet,getEventReturn:T.apiCallEvents.seekableApiCallGetReturn}),this.addProperty(t,e,"hasPlayed",{getEvent:T.apiCallEvents.hasPlayedApiCallGet,getEventReturn:T.apiCallEvents.hasPlayedApiCallGetReturn}),this.addProperty(t,e,"controls",{setEvent:T.apiCallEvents.controlsApiCallSet,getEvent:T.apiCallEvents.controlsApiCallGet,getEventReturn:T.apiCallEvents.controlsApiCallGetReturn}),this.addProperty(t,e,"playlistSize",{getEvent:T.apiCallEvents.playlistSizeApiCallGet,getEventReturn:T.apiCallEvents.playlistSizeApiCallGetReturn}),this.addProperty(t,e,"currentPlaylistItem",{getEvent:T.apiCallEvents.currentPlaylistItemApiCallGet,getEventReturn:T.apiCallEvents.currentPlaylistItemApiCallGetReturn}),this.addProperty(t,e,"activeSubtitles",{getEvent:T.apiCallEvents.activeSubtitlesApiCallGet,getEventReturn:T.apiCallEvents.activeSubtitlesApiCallGetReturn}),Object.defineProperty(e,"playbackRate",{get:function(){return Promise.resolve(1)}}),this.addProperty(t,e,"availableQualities",{getEvent:T.apiCallEvents.availableQualitiesApiCallGet,getEventReturn:T.apiCallEvents.availableQualitiesApiCallGetReturn}),this.addProperty(t,e,"autoplay",{setEvent:T.apiCallEvents.autoplayApiCallSet,getEvent:T.apiCallEvents.autoplayApiCallGet,getEventReturn:T.apiCallEvents.autoplayApiCallGetReturn})},e.addMethods=function(e,t){Object.defineProperty(e,"play",{value:function(){t.publish(T.apiCallEvents.playApiCall)}}),Object.defineProperty(e,"pause",{value:function(){t.publish(T.apiCallEvents.pauseApiCall)}}),Object.defineProperty(e,"togglePlay",{value:function(){t.publish(T.apiCallEvents.togglePlayApiCall)}}),Object.defineProperty(e,"skipAd",{value:function(){t.publish(T.apiCallEvents.skipAdApiCall)}}),Object.defineProperty(e,"toggleCast",{value:function(){t.publish(T.apiCallEvents.toggleCastApiCall)}}),Object.defineProperty(e,"toggleMute",{value:function(){t.publish(T.apiCallEvents.toggleMuteApiCall)}}),Object.defineProperty(e,"rewindSeconds",{value:function(e){t.publish(T.apiCallEvents.rewindSecondsApiCall,e)}}),Object.defineProperty(e,"fastSeek",{value:function(e){t.publish(T.apiCallEvents.fastSeekApiCall,e)}}),Object.defineProperty(e,"liveStartOver",{value:function(){t.publish(T.apiCallEvents.liveStartOverApiCall)}}),Object.defineProperty(e,"toggleSubtitles",{value:function(){t.publish(T.apiCallEvents.toggleSubtitlesApiCall)}}),Object.defineProperty(e,"toggleFullscreen",{value:function(){t.publish(T.apiCallEvents.toggleFullscreenApiCall)}}),Object.defineProperty(e,"disableInterface",{value:function(){t.publish(T.apiCallEvents.disableInterfaceApiCall)}}),Object.defineProperty(e,"enableInterface",{value:function(){t.publish(T.apiCallEvents.enableInterfaceApiCall)}}),Object.defineProperty(e,"throwError",{value:function(e,n){void 0===n&&(n=null),t.publish(T.apiCallEvents.throwErrorApiCall,{message:e,content:n})}}),Object.defineProperty(e,"showTitle",{value:function(e){t.publish(T.apiCallEvents.showTitleApiCall,e)}}),Object.defineProperty(e,"next",{value:function(){t.publish(T.apiCallEvents.nextApiCall)}}),Object.defineProperty(e,"previous",{value:function(){t.publish(T.apiCallEvents.previousApiCall)}}),Object.defineProperty(e,"goto",{value:function(e){t.publish(T.apiCallEvents.gotoApiCall,e)}}),Object.defineProperty(e,"addToPlaylist",{value:function(e,n){t.publish(T.apiCallEvents.addToPlaylistApiCall,{mediaReference:e,digitalData:n})}}),Object.defineProperty(e,"setQuality",{value:function(e){t.publish(T.apiCallEvents.setQualityApiCall,e)}})},e.addProperty=function(e,t,n,r){r.setEvent&&r.getEvent&&r.getEventReturn?Object.defineProperty(t,n,{set:function(t){Promise.resolve(t).then((function(t){e.publish(r.setEvent,t)})).catch((function(){console.warn("Cannot set property "+n+" ("+JSON.stringify(t,null,4)+")")}))},get:function(){return new Promise((function(t,n){e.addOneTimeSubscriber(r.getEventReturn,(function(e){t(e.content)})),e.publish(r.getEvent)}))}}):(r.setEvent&&Object.defineProperty(t,n,{set:function(t){e.publish(r.setEvent,t)}}),r.getEvent&&r.getEventReturn&&Object.defineProperty(t,n,{get:function(){return new Promise((function(t,n){e.addOneTimeSubscriber(r.getEventReturn,(function(e){t(e.content)})),e.publish(r.getEvent)}))}}))},e}(),vt=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))},bt=function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},mt=function(){function e(e,t,n){var r=this;this.config=e;var i,a=new Se(n,e),l={playlist:t,isFirstPlaylistItem:!0,mediaEnricher:null,alreadyInError:!1,wasPlaying:null,position:0};ft.decorateEventingApi(this,n);var s=function(o){return vt(r,void 0,void 0,(function(){var r,s,c;return bt(this,(function(p){switch(p.label){case 0:if(p.trys.push([0,12,,16]),!o)throw new Error("MediaEnricher not provided!");return l.mediaEnricher&&(l.mediaEnricher.destroy(),l.mediaEnricher=null),l.mediaEnricher=o,Ae.validatePlaylist(t),r=void 0,o.isVRT()||o.isStandAloneVideo()?i?[3,2]:[4,(i=this.config.playerMode===u.VIDEO?new Je(this.config,n):new et(this.config,n)).setupUserInterface(n)]:[3,4];case 1:return p.sent(),[3,3];case 2:i.onPlayerResetRequested(),p.label=3;case 3:return r=new yt(e,l.playlist),[3,9];case 4:return i?[3,7]:[4,it.loadPlayerWithVideo(this.config.containerElement,l.playlist.current().mediaReference,n)];case 5:return[4,(i=p.sent()).setupUserInterface(n)];case 6:return p.sent(),[3,8];case 7:p.label=8;case 8:r=new Ie(e,l.playlist),p.label=9;case 9:return[4,r.preparePlayerForPlayback(n,i,o)];case 10:return p.sent(),r.restorePlayback(n,l.isFirstPlaylistItem,l.wasPlaying,l.position,a.userPreferences),ft.decoratePublicApi(this,n),n.publish(T.internalPlayerEvents.ready),[4,O.wait(33)];case 11:return p.sent(),a.bindToPlayer(),n.publish(T.publicPlayerEvents.canplay),[3,16];case 12:return s=p.sent(),l.alreadyInError?[2]:[3,13];case 13:return c=s||"incorrect configuration!",console.error("Player cannot be started: "+c),b.errorToSentry("Player startup",{name:"General error",code:d.PLAYER_API_ERROR_GENERAL,content:{config:e,error:s}}),[4,O.wait(500)];case 14:return p.sent(),n.errorHandler.handleError(d.PLAYER_API_ERROR_GENERAL,"errors-the-player-cannot-be-started"+c,e),[2];case 15:return[3,16];case 16:return[2]}}))}))},c=function(){l.isFirstPlaylistItem=!1,l.alreadyInError=!1,l.position=null,n.publish(T.internalPlayerEvents.reset)};vt(r,void 0,void 0,(function(){return bt(this,(function(r){return s(Ae.createMediaEnricher(e,n,t.current())),[2]}))})),n.addSubscriber(T.publicPlayerEvents.error,(function(){l.alreadyInError=!0})),n.addSubscriber(T.internalPlayerEvents.mediaReferenceChanged,(function(r){try{l.wasPlaying=i.isPlaying(),l.playlist=new at(r.content.newMediaReferences,r.content.newDigitalDatas),c(),s(Ae.createMediaEnricher(e,n,t.current()))}catch(e){n.errorHandler.handleError(d.PLAYER_API_ERROR_PLAYLIST,e,r)}})),n.addSubscriber(T.publicPlayerEvents.ended,(function(r){if(l.playlist.peek())switch(e.nextUpAutoPlay.toLowerCase()){case o.ON:l.playlist.next(),n.publish(T.publicPlayerEvents.nextupremoved),l.wasPlaying=!0,c(),s(Ae.createMediaEnricher(e,n,t.current()));break;case o.OFF_STOP_AT_BEGIN:l.playlist.next(),n.publish(T.publicPlayerEvents.nextupremoved),l.wasPlaying=!1,c(),s(Ae.createMediaEnricher(e,n,t.current()));break;case o.OFF_STOP_AT_END:break;default:throw new Error("Unknown next-up-autoplay parameter!")}})),n.addSubscriber(T.publicPlayerEvents.nextsourcerequested,(function(r){n.publish(T.publicPlayerEvents.nextupremoved),l.wasPlaying=i.isPlaying(),l.playlist.next()&&(c(),s(Ae.createMediaEnricher(e,n,t.current())))})),n.addSubscriber(T.publicPlayerEvents.previoussourcerequested,(function(r){n.publish(T.publicPlayerEvents.nextupremoved),l.wasPlaying=i.isPlaying(),l.playlist.previous()&&(c(),s(Ae.createMediaEnricher(e,n,t.current())))})),n.addSubscriber(T.internalPlayerEvents.playlistSourceRequested,(function(r){n.publish(T.publicPlayerEvents.nextupremoved);var a=null!==r.content.index?r.content.index:l.playlist.getIndexForMediaReference(r.content.mediaReference);l.playlist.setTo(a)&&(l.wasPlaying=i.isPlaying(),c(),s(Ae.createMediaEnricher(e,n,t.current())))})),n.addSubscriber(T.internalPlayerEvents.nextupAnnounced,(function(e){return vt(r,void 0,void 0,(function(){var r,i,a,o;return bt(this,(function(s){switch(s.label){case 0:return l.mediaEnricher=Ae.createMediaEnricher(this.config,n,l.playlist.peek()),i=(r=n).publish,a=[T.publicPlayerEvents.nextupannounced],o={},[4,l.mediaEnricher.mediaInfo];case 1:return i.apply(r,a.concat([(o.mediaInfo=s.sent().mapToPublicMediaInfo(),o.nextUpPlaylistItem=t.peek(),o.remainingDuration=e.content.remainingDuration,o)])),[2]}}))}))}));var p=function(e){return void 0===e&&(e=null),vt(r,void 0,void 0,(function(){return bt(this,(function(t){switch(t.label){case 0:return c(),l.wasPlaying=i.isPlaying(),l.position=i.playHeadPosition(),[4,s(e)];case 1:return t.sent(),[2]}}))}))};n.addSubscriber(T.internalPlayerEvents.newIdentityTokenReceived,(function(e){return vt(r,void 0,void 0,(function(){return bt(this,(function(t){switch(t.label){case 0:return this.config.identityToken=e.content.newIdentityToken,[4,p(Ae.createMediaEnricher(this.config,n,l.playlist.current()))];case 1:return t.sent(),n.publish(T.internalPlayerEvents.identityTokenUpdated),[2]}}))}))})),n.addSubscriber(T.internalPlayerEvents.forceReload,(function(e){return vt(r,void 0,void 0,(function(){return bt(this,(function(t){switch(t.label){case 0:return this.config.identityToken=e.content.newIdentityToken,e.content.performLiveStartOver&&!0===e.content.performLiveStartOver?this.config.isLiveStartOver=!0:this.config.isLiveStartOver=!1,[4,p(Ae.createMediaEnricher(this.config,n,l.playlist.current()))];case 1:return t.sent(),[2]}}))}))})),n.addSubscriber(T.internalPlayerEvents.unLoad,(function(e){return vt(r,void 0,void 0,(function(){return bt(this,(function(e){return this.config.identityToken="",i.setSource(V.createDummyMediaInfo()),n.publish(T.internalPlayerEvents.reset),n.publish(T.internalPlayerEvents.showError,{name:"Fout",message:"Inloggen is vereist!"}),[2]}))}))}))}return e.prototype.play=function(){console.error("Player API not available!")},e.prototype.pause=function(){console.error("Player API not available!")},e.prototype.togglePlay=function(){console.error("Player API not available!")},e.prototype.skipAd=function(){console.error("Player API not available!")},e.prototype.toggleCast=function(){console.error("Player API not available!")},e.prototype.rewindSeconds=function(e){console.error("Player API not available!")},e.prototype.toggleMute=function(){console.error("Player API not available!")},e.prototype.fastSeek=function(e){console.error("Player API not available!")},e.prototype.liveStartOver=function(){console.error("Player API not available!")},e.prototype.toggleSubtitles=function(){console.error("Player API not available!")},e.prototype.toggleFullscreen=function(){console.error("Player API not available!")},e.prototype.showTitle=function(e){console.error("Player API not available!")},e.prototype.disableInterface=function(){console.error("Player API not available!")},e.prototype.enableInterface=function(){console.error("Player API not available!")},e.prototype.next=function(){console.error("Player API not available!")},e.prototype.previous=function(){console.error("Player API not available!")},e.prototype.goto=function(e){console.error("Player API not available!")},e.prototype.addToPlaylist=function(e){console.error("Player API not available!")},e.prototype.setQuality=function(e){console.error("Player API not available!")},e.prototype.addEventListener=function(e,t){console.error("Player API not available!")},e.prototype.removeEventListener=function(e,t){console.error("Player API not available!")},e.prototype.throwError=function(e,t){void 0===t&&(t=null),console.error("Player API not available!")},e.prototype.destroy=function(){console.error("Player API not available!")},e}(),gt=function(){function e(){}return e.getColor=function(e){switch(e){case"green":return this.GREEN;case"blue":return this.BLUE;case"red":return this.RED;case"white":return this.WHITE;case"ketnet":return this.KETNET;default:return console.warn("WARNING: unknown color '"+e+"' found in config. Fallback to default color!"),this.GREEN}},e.GREEN={name:"green",styleName:"vrt-green",value:"#53EC66"},e.BLUE={name:"blue",styleName:"vrt-blue",value:"#0098CC"},e.RED={name:"red",styleName:"vrt-red",value:"#BC2821"},e.WHITE={name:"white",styleName:"vrt-white",value:"#FFFFFF"},e.KETNET={name:"ketnet",styleName:"vrt-ketnet",value:"#F72154"},e}(),Et=function(){return(Et=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};!function(e){e.DEFAULT="default",e.DUMMY="dummy",e.KETNET="ketnet",e.SPORZA="sporza",e.VRTNU="vrtnu",e.VRTNWS="vrtnws"}(lt||(lt={}));var At=function(){function e(){}return e.getPreset=function(e){if(!e)return this.DEFAULT;switch(e.toLowerCase()){case"default":return this.DEFAULT;case"dummy":return this.DUMMY;case"ketnet":return this.KETNET;case"sporza":return this.SPORZA;case"vrtnu":return this.VRT_NU;case"vrtnws":return this.VRT_NWS;default:return console.warn("WARNING: unknown preset '"+e.toLowerCase()+"' found in config. Falling back to the default preset!"),this.DEFAULT}},e.mergeWithConfig=function(e,t){var n=Et(Et({},e),t);return n.uiLanguage=c.isLanguageSupported(n.uiLanguage)?n.uiLanguage.toLowerCase():h.DEFAULTS.uiLanguage,"string"==typeof n.color&&(n.color=gt.getColor(n.color)),Object.values(lt).includes(n.skin)||(console.warn("WARNING: skin '"+t.skin+"' not found. Falling back to the default skin!"),t.skin="default"),n},e.DEFAULT={skin:lt.DEFAULT,color:gt.GREEN},e.DUMMY={skin:lt.DUMMY,color:gt.GREEN},e.KETNET={skin:lt.KETNET,color:gt.KETNET},e.SPORZA={skin:lt.SPORZA,color:gt.GREEN},e.VRT_NU={skin:lt.VRTNU,color:gt.GREEN},e.VRT_NWS={skin:lt.VRTNWS,color:gt.GREEN},e}(),Pt=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))},Rt=function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},wt=function(e,t,n){var r=this;this.version="1.9.9-prod-2021-10-21T12:48:33",this.playerCount=0,this.getNextId=function(){return"vrtplayer-id-"+r.playerCount++};var i=[],a=new WeakMap;this.get=function(e,t,n,r,i,a,l){return o(e,t,n,r,i,a,l)},this.updateIdentityToken=function(e){return Pt(r,void 0,void 0,(function(){var t,n;return Rt(this,(function(r){switch(r.label){case 0:if(te.lastIdentityToken===e)return[2];h.DEFAULTS.identityToken=e,te.clearToken(),t=function(t){var n;return Rt(this,(function(r){switch(r.label){case 0:return n=i[t],0!==t?[3,2]:(n.playerPublisher.publish(T.internalPlayerEvents.newIdentityTokenReceived,{newIdentityToken:e}),[4,new Promise((function(e,t){n.playerPublisher.addSubscriber(T.internalPlayerEvents.identityTokenUpdated,(function(t){e()}))}))]);case 1:return r.sent(),[3,3];case 2:n.playerPublisher.publish(T.internalPlayerEvents.forceReload,{newIdentityToken:e}),r.label=3;case 3:return[2]}}))},n=0,r.label=1;case 1:return n<i.length?[5,t(n)]:[3,4];case 2:r.sent(),r.label=3;case 3:return n++,[3,1];case 4:return[2]}}))}))},this.unloadPlayers=function(){return Pt(r,void 0,void 0,(function(){var e,t;return Rt(this,(function(n){for(h.DEFAULTS.identityToken="",te.clearToken(),e=0,t=i;e<t.length;e++)t[e].playerPublisher.publish(T.internalPlayerEvents.unLoad);return[2]}))}))};var o=function(e,t,n,i,o,l,s){if(!e)throw new Error("The get method should always be called with a player element!");var c=a.get(e)||new Promise((function(a,c){var p;p=e.hasAttribute("data-id")?e.getAttribute("data-id"):r.getNextId(),e.setAttribute("data-id",p),u(e,t,n,i,o).then((function(t){var n=document.getElementById(p);n&&n instanceof HTMLIFrameElement?e=n:y(e,t),l&&l(t),a(t)})).catch((function(t){e.parentElement.removeChild(e),s(t),c(t)}))}));return a.set(e,c),c},l=!0,s=!1,u=function(t,a,o,u,p){return new Promise((function(y,f){return Pt(r,void 0,void 0,(function(){var r,v,b,m,g,E,A,P=this;return Rt(this,(function(R){try{r=t.getAttribute("data-id"),p=At.mergeWithConfig(At.getPreset(a.preset),p),v=new T(p.uiLanguage),b=function(){return Pt(P,void 0,void 0,(function(){return Rt(this,(function(r){switch(r.label){case 0:return c(t),[4,d(t,p.skin)];case 1:return r.sent(),[2,new Promise((function(r,l){if(a.eventMappings)for(var s=0,c=a.eventMappings;s<c.length;s++){var d=c[s];v.addSubscriber(v.detectPublicEventTypeFromString(d.event),d.handler)}var y=function(e,t){return!!t.find((function(t){if(t.playerElement.id===e.id)return t}))};v.addOneTimeSubscriber(T.internalPlayerEvents.ready,(function(){y(t,i)||(i.push({playerElement:t,playerInstance:b,playerPublisher:v}),r(b))})),v.addOneTimeSubscriber(T.publicPlayerEvents.error,(function(){y(t,i)||(i.push({playerElement:t,playerInstance:b,playerPublisher:v}),r(b))})),v.addOneTimeSubscriber(T.internalPlayerEvents.destroy,(function(e){i.splice(i.indexOf(i.find((function(e){return e.playerElement===t}))),1)}));var f=new at(a.mediaReference?a.mediaReference:a.mediaReferences?a.mediaReferences:null,o),b=new mt({productionMode:e,containerElement:t,libraryLocation:n,aggregatorUrl:a.aggregatorUrl,clientCode:a.clientCode?a.clientCode:null,identityToken:a.identityToken?a.identityToken:h.DEFAULTS.identityToken,showNoErrors:a.customErrorHandling,preloadMode:a.preloadMode?a.preloadMode:h.DEFAULTS.preloadMode,abrStrategy:a.abrStrategy?a.abrStrategy:h.DEFAULTS.abrStrategy,playerMode:a.playerMode?a.playerMode:h.DEFAULTS.playerMode,aspectRatio:a.aspectRatio?a.aspectRatio:h.DEFAULTS.aspectRatio,cimId:a.cimId?a.cimId:h.DEFAULTS.cimId,nextUpDelay:a.nextUpDelay?a.nextUpDelay:h.DEFAULTS.nextUpDelay,nextUpAutoPlay:a.nextUpAutoPlay?a.nextUpAutoPlay:h.DEFAULTS.nextUpAutoPlay,authoringMode:!1!==a.authoringMode?a.authoringMode:h.DEFAULTS.authoringMode,startMutedOverride:!1!==a.startMutedOverride?a.startMutedOverride:h.DEFAULTS.startMutedOverride,autoplay:!1!==a.autoplay?a.autoplay:h.DEFAULTS.autoplay,analyticsAssetNameOverride:a.analyticsAssetNameOverride?a.analyticsAssetNameOverride:null,isLiveStartOver:!1!==a.isLiveStartOver?a.isLiveStartOver:h.DEFAULTS.isLiveStartOver,startOverBegin:a.startOverBegin?a.startOverBegin:h.DEFAULTS.startOverBegin,startOverEnd:a.startOverEnd?a.startOverEnd:h.DEFAULTS.startOverEnd,uiConfig:p,adConfig:u},f,v)}))]}}))}))};try{(m=te.loadStoredToken(a.aggregatorUrl))&&!m.hasNotExpired()&&(te.clearToken(),l=!0,s=!1)}catch(e){te.clearToken(),l=!0,s=!1}if(!(g=a.mediaReference?a.mediaReference:a.mediaReferences&&a.mediaReferences.length>0?a.mediaReferences[0]:null))throw new Error("["+r+"]A single mediaReference or mediaReferences array is required!");E=Ae.isVrtMediaReference(g),l&&E?(l=!1,v.addOneTimeSubscriber(T.internalPlayerEvents.tokenAcquired,(function(e){s=!0})),y(b())):s||!E?y(b()):A=setInterval((function(){s&&(clearInterval(A),y(b()))}),50)}catch(e){f("Cannot create player: "+e)}return[2]}))}))}))},c=function(e){var t=document.createElement("div");t.className="player-controls-container",t.style.display="none",e.appendChild(t)},p=function(e,t,n,r,i){var a=t.querySelector(n);a&&a.addEventListener("click",(function(){i?e[r](i):e[r]()}))},d=function(e,n){return Pt(r,void 0,void 0,(function(){var r,i,a;return Rt(this,(function(o){switch(o.label){case 0:return o.trys.push([0,3,,4]),e.getAttribute("data-id"),[4,_.doGet(t+"templates/"+n+"/overlay.html",!1,[])];case 1:return r=o.sent(),[4,_.doGet(t+"templates/"+n+"/controls.html",!1,[])];case 2:return i=o.sent(),e.classList.add("theoplayer-container","video-js","theoplayer-skin"),e.innerHTML+=r.response,e.children[0].innerHTML=i.response,[3,4];case 3:throw a=o.sent(),new Error("Speler skin kan niet geladen worden! ("+a+")");case 4:return[2]}}))}))},y=function(e,t){p(t,e,".player-overlay-cast","toggleCast"),p(t,e,".player-overlay-airplay","toggleCast"),p(t,e,".player-overlay-skip","skipAd"),p(t,e,".player-up-next-container","next"),p(t,e,".player-overlay-btn-play","play"),p(t,e,".player-overlay-btn-mobile-play-toggle","togglePlay"),p(t,e,".player-controls-play-pause","togglePlay"),p(t,e,".player-controls-goback","rewindSeconds",10),p(t,e,".player-controls-forward","rewindSeconds",-10),p(t,e,".player-controls-mute","toggleMute"),p(t,e,".player-controls-startover","liveStartOver"),p(t,e,".player-controls-subtitles","toggleSubtitles"),p(t,e,".player-controls-fullscreen","toggleFullscreen")}},St=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))},Tt=function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};new(function(){function e(){var e=this;this.window=window,this.isProductionMode=!1,D.loadPolyfills((function(){return St(e,void 0,void 0,(function(){var e;return Tt(this,(function(t){switch(t.label){case 0:this.cdnUrl=D.getCdnUrl(),this.cdnUrl,t.label=1;case 1:return t.trys.push([1,5,,6]),[4,D.loadLibrary("https://browser.sentry-cdn.com/5.17.0/bundle.min.js",{attributes:{integrity:"sha384-lowBFC6YTkvMIWPORr7+TERnCkZdo5ab00oH5NkFLeQUAmBTLGwJpFjF6djuxJ/5",crossOrigin:"anonymous"}},!0)];case 2:return t.sent(),this.window.Sentry&&this.window.Sentry.init({dsn:"https://a49787537bc74c57bee5982de257cdf8@o140591.ingest.sentry.io/1534551",sampleRate:.1,environment:"Production",integrations:{globalHandlers:{onerror:!1,onunhandledrejection:!1}},ignoreErrors:["top.GLOBALS","originalCreateNotification","canvas.contentDocument","jigsaw is not defined","ComboSearch is not defined","http://loading.retry.widdit.com/","atomicFindClose","fb_xd_fragment","bmi_SafeAddOnload","EBCallBackMessageReceived","conduitPage"],blacklistUrls:[/extensions\//i,/^chrome:\/\//i],whitelistUrls:[/(mediaplayer\/js\/main)+/g],beforeSend:function(e,t){return t&&t.originalException&&t.originalException.stack&&t.originalException.stack.search("mediaplayer/js/main")>-1?e:null}}),[4,Promise.all([D.loadCSS(this.cdnUrl+"css/player.css"),D.loadCSS(this.cdnUrl+"theo/ui.css"),D.loadLibrary(this.cdnUrl+"theo/THEOplayer.js",{}),D.loadLibrary(this.cdnUrl+"js/focus/focus-visible.js",{}),D.loadLibrariesSequential([this.cdnUrl+"js/element-queries/ResizeSensor.js",this.cdnUrl+"js/element-queries/ElementQueries.js"]),D.loadLibrariesSequential([this.cdnUrl+"js/tippy/popper.min.js",this.cdnUrl+"js/tippy/index.all.min.js"]),D.loadLibraryOnCondition("https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1",we.canChromecast(),!0),D.loadLibrary("https://www.youtube.com/iframe_api",{},!0,"onYouTubeIframeAPIReady"),D.loadLibrary("https://imasdk.googleapis.com/js/sdkloader/ima3.js",{},!0),this.productionModeCheck()])];case 3:return t.sent(),this.window.ElementQueries.listen(),this.window.ElementQueries.init(),Promise.all([I.loadLibrary(),G.loadLibrary()]).then((function(){})),[4,this.registerPlayerCreationFunctions()];case 4:return t.sent(),window.dispatchEvent(new CustomEvent("vrtPlayerBootstrapped")),[3,6];case 5:return e=t.sent(),window.dispatchEvent(new CustomEvent("vrtPlayerBootstrapFailed")),b.errorToSentry("Player bootstrap",e),[3,6];case 6:return[2]}}))}))}))}return e.prototype.productionModeCheck=function(){var e=this;return new Promise((function(t,n){if(null!==document.getElementById("devEnabled"))var r=setInterval((function(){null!==document.body&&(clearInterval(r),document.body.classList.add("dev"))}),10);else e.isProductionMode=!0;t()}))},e.prototype.registerPlayerCreationFunctions=function(){return St(this,void 0,void 0,(function(){var e;return Tt(this,(function(t){switch(t.label){case 0:return e=this.window,[4,new wt(this.isProductionMode,this.cdnUrl,this.cdnUrl+"theo/")];case 1:return e.VRTMediaPlayer=t.sent(),[2]}}))}))},e}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,